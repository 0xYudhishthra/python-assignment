
FUNCTION clearConsole()
    IF (CALL os.name IN ("nt", "dos")) THEN  
        CALL os.system("cls")
    ELSE
        CALL os.system("clear")
    ENDIF
ENDFUNCTION
    
FUNCTION quit() 
    DISPLAY newline
    DISPLAY "Thank you! Please come again"   
    CALL time.sleep(1)
    CALL exit()
ENDFUNCTION
	
FUNCTION userInput(promptMessage, skipLine) 
    IF (skipLine) THEN
        DISPLAY newline
        DISPLAY promptMessage + " >> "
        READ input
        RETURN input 
    ELSE
        DISPLAY promptMessage + " >> "
        READ input
        RETURN input 
    ENDIF
ENDFUNCTION

FUNCTION authUsername(username,detailsList)
    FOR EACH data IN detailsList
        IF (username == data[0]) THEN
            RETURN True
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION authPassword(username, password, detailsList) 
    FOR EACH data IN detailsList
        IF ((username == data[0]) AND (password == data[1])) THEN
            RETURN True
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION skipFileLine(count, fileHandle) 
    LOOP i FROM 0 TO (count-1) STEP 1
        CALL next(fileHandle) 
        NEXT i 
    ENDLOOP
ENDFUNCTION

FUNCTION removeEmptyList(sourceList)
    updatedList = []
    FOR EACH data IN sourceList
        DOWHILE ('' IN data)
            REMOVE ('') FROM data
        ENDDO
    ENDFOR
    FOR EACH data IN sourceList
        IF data != [] THEN
            APPEND data TO updatedList
    ENDFOR
    RETURN updatedList
ENDFUNCTION

FUNCTION progressBar(loadingMessage)
    DISPLAY loadingMessage + "..."
    animation = ["[■□□□□□□□□□]","[■■□□□□□□□□]", "[■■■□□□□□□□]", "[■■■■□□□□□□]", "[■■■■■□□□□□]", 
                  "[■■■■■■□□□□]", "[■■■■■■■□□□]", "[■■■■■■■■□□]", "[■■■■■■■■■□]", "[■■■■■■■■■■]"]
    FOR EACH item IN animation
        CALL time.sleep(0.05)
        DISPLAY "\r" + item WITH end = "" 
    ENDFOR
ENDFUNCTION

FUNCTION pageBanners(pageTitle, centerLength)
    DISPLAY "_" * (pageTitle LENGTH) WITH CALL center(centerLength)
    DISPLAY newline
    DISPLAY pageTitle WITH CALL center(centerLength)
    DISPLAY "_" * (pageTitle LENGTH) WITH CALL center(centerLength)
ENDFUNCTION


'''FILE HANDLING FUNCTIONS'''

FUNCTION readAdminDetailsFile()  
    adminDetailsList = [] 
    TRY
        OPEN FILE ADMIN_DETAILS_FILE IN READ MODE AS adminDetailsFile
            CALL skipFileLine(6,adminDetailsFile)
            FOR EACH row IN adminDetailsFile
                STRIP row BY "\n"
                REPLACE row FROM " | " TO " "
                SPLIT row BY " "
                APPEND row to adminDetailsList
            ENDFOR
        CLOSE FILE ADMIN_DETAILS_FILE
        RETURN adminDetailsList
    EXCEPT ERROR THEN
        DISPLAY "Admin details file is missing!" 
    ENDTRY
ENDFUNCTION



FUNCTION readFoodDetailsFile()
    foodDetailsList=[]
        TRY
            OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS foodDetailsFile
                CALL skipFileLine(6,foodDetailsFile) 
                FOR EACH row IN foodDetailsFile
                    IF (row[0] == "_") THEN
                        CALL skipFileLine(3,foodDetailsFile)
                    ENDIF
                    REPLACE row FROM "\n" TO ""
                    REPLACE row FROM "_" TO ""
                    SPLIT row BY " | "
                    APPEND row to foodDetailsList
                ENDFOR
            CLOSE FILE FOOD_DETAILS_FILE
            foodDetailsList = CALL removeEmptyList(foodDetailsList)
            RETURN foodDetailsList
        EXCEPT ERROR THEN
            DISPLAY "Food details file is missing!"
        ENDTRY
ENDFUNCTION


FUNCTION readOrderRecordsFile()
    orderDetailsList = []
    TRY
        OPEN FILE ORDER_RECORDS_FILE IN READ MODE AS orderRecordsFile
            CALL skipFileLine(6,orderRecordsFile)
            FOR EACH row IN orderRecordsFile
                STRIP row BY '\n'
                SPLIT row BY " | "
                APPEND row TO orderDetailsList
            ENDFOR
        CLOSE FILE ORDER_RECORDS_FILE
        RETURN orderDetailsList
    EXCEPT ERROR THEN
        DISPLAY "Order records file is missing!"
    ENDTRY
ENDFUNCTION


FUNCTION readCustomerDetailsFile()
    customerDetailsList = [] 
    TRY
        OPEN CUSTOMER_DETAILS_FILE IN READ MODE AS customerDetailsFile
            CALL skipFileLine(6,customerDetailsFile)
            FOR EACH row IN customerDetailsFile
                STRIP row BY "\n"
                REPLACE row FROM " | " TO " "
                SPLIT row BY " "
                APPEND row TO customerDetailsList
            ENDFOR
        CLOSE FILE CUSTOMER_DETAILS_FILE
        RETURN customerDetailsList
    EXCEPT ERROR THEN
        DISPLAY "Customers database is missing!" 
    ENDTRY
ENDFUNCTION      



'''DECLARING FUNCTIONS FOR ADMIN DASHBOARD'''

'''Login to access system'''

FUNCTION adminLoginPage()
    DOWHILE (True)
        TRY 
            adminDetailsList = CALL readAdminDetailsFile()
            uName = CALL userInput("Username",True) WITH CALL lower()
            CALL progressBar("Checking if username exists")
            CALL time.sleep(0.05)
            IF (CALL authUsername(uName,adminDetailsList)) THEN
                DISPLAY " Username found, please enter password "
                DISPLAY newline
                DOWHILE (True)
                    uPass = CALL userInput("Password",True)
                    IF (CALL authPassword(uName, uPass,adminDetailsList)) THEN
                        CALL progressBar("Logging you in")
                        CALL time.sleep(0.05)
                        CALL adminMenu(uName)
                        BREAK
                    ELSE
                        DISPLAY "Incorrect password, please retry"
                        DISPLAY newline
                    ENDIF
                ENDDO
            ELSE 
                DISPLAY " Username not found, please retry" 
                CONTINUE
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "Admin details file is corrupted!"
        ENDTRY
        BREAK
    ENDDO
ENDFUNCTION



FUNCTION adminMenu(uName="")
    DOWHILE (True)
        TRY
            CALL clearConsole()
            CALL pageBanners("ADMIN DASHBOARD",50)
            DISPLAY newline
            DISPLAY "Hey, " + uName WITH CALL capitalize() + "! What would you like to do today?"
            DISPLAY newline
            DISPLAY "1. Add food item"
            DISPLAY "2. Modify food item"
            DISPLAY "3. Display records"
            DISPLAY "4. Search record"
            DISPLAY "0. Log out"
            userSelection = (CALL userInput("I would like to",True)) AS INTEGER
            IF (userSelection == 0) THEN
                CALL progressBar("Logging out")
                CALL main()
            ELSE 
                IF (userSelection == 1) THEN
                    CALL clearConsole()
                    CALL pageBanners("ADD NEW FOOD ITEM",50)
                    CALL addFoodItemMenu()
                ELSE 
                    IF (userSelection == 2) THEN
                        CALL clearConsole()
                        CALL pageBanners("MODIFY FOOD ITEM",50)
                        CALL modifyFoodItemMenu()
                    ELSE 
                        IF (userSelection == 3) THEN
                            CALL clearConsole()
                            CALL pageBanners("DISPLAY RECORDS",50)
                            CALL displayRecordsMenu()
                        ELSE 
                            IF (userSelection == 4) THEN
                                CALL clearConsole()
                                CALL pageBanners("SEARCH RECORDS",50)
                                CALL searchRecordsMenu()
                            ELSE
                                DISPLAY "Number is out of range!"
                                CALL time.sleep(1)
                                CONTINUE
                            ENDIF
                        ENDIF
                    ENDIF
                ENDIF
            ENDIF
            BREAK
        EXCEPT ERROR THEN
            DISPLAY "Please submit a number"
            CALL time.sleep(1) 
        ENDTRY
    ENDDO
ENDFUNCTION



'''Add food item by category'''

FUNCTION addFoodItemMenu()
    DOWHILE (True)
        TRY
            foodCategoryTitles = CALL extractFoodCategories()
            DISPLAY newline
            DISPLAY "In which category would you like to add the food item?"
            DISPLAY newline * 2
            DISPLAY "0. Add new food category"
            CALL displayFoodCategories()
            chosenFoodCategoryNumber = (CALL userInput("Food Category Number",True)) AS INTEGER
            IF (chosenFoodCategoryNumber == 0) THEN
                newFoodCategoryName = CALL userInput("Category Name",False)
                newFoodCategoryDescription = CALL userInput("Description",False)
                CALL writeNewFoodCategoryToFile(newFoodCategoryName,newFoodCategoryDescription)
                DISPLAY "Would you like to add a new food item in this category?"
                userConfirmation = (CALL userInput("(Y)es/(N)o",False)) WITH CALL upper()
                IF (userConfirmation == 'Y') THEN
                    foodItemName,foodItemPrice = CALL getNewFoodItemDetails(newFoodCategoryName)
                    CALL writeNewFoodItemToFile(newFoodCategoryName, foodItemName, foodItemPrice)
                ELSE
                    CALL addFoodItemMenu()
                ENDIF
            ELSE 
                IF ((chosenFoodCategoryNumber > 0) AND (chosenFoodCategoryNumber <= (foodCategoryTitles LENGTH))) THEN
                    chosenFoodCategoryName = foodCategoryTitles[(chosenFoodCategoryNumber AS INTEGER)-1][0] WITH CALL replace ("FOOD CATEGORY", ""), strip(), capitalize()
                    foodItemName,foodItemPrice = CALL getNewFoodItemDetails(chosenFoodCategoryName)
                    DISPLAY newline
                    DISPLAY "Please confirm the new food details you would like to add"
                    userConfirmation = CALL userInput("(Y)es/(N)o",False) WITH CALL upper()
                        IF (userConfirmation == 'Y') THEN
                            CALL writeNewFoodItemToFile(chosenFoodCategoryName,foodItemName,foodItemPrice)
                        ELSE 
                            IF (userConfirmation == 'N') THEN
                                CALL addFoodItemMenu()
                            ELSE
                                DISPLAY("Please enter either Y or N")
                                CONTINUE
                            ENDIF
                        ENDIF
                ELSE
                    DISPLAY "Invalid food category number"
                    CALL time.sleep(1)
                    CONTINUE
                ENDIF
            ENDIF
            BREAK
        EXCEPT ERROR THEN
            DISPLAY "Please submit a number!"
            CALL time.sleep(1)
        EXCEPT ERROR THEN 
            DISPLAY "Food details file is corrupted!"
            BREAK
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION getNewFoodItemDetails(chosenFoodCategoryName):
    TRY
        foodItemName = CALL userInput("New Food Item Name",False)
        foodItemPrice = (CALL userInput("New Food Item Price",False)) AS FLOAT formatted to 2 decimal places
        DISPLAY "FOOD CATEGORY  FOOD ITEM PRICE FOOD ITEM NAME"
        DISPLAY chosenFoodCategoryName,foodItemPrice,foodItemName
        RETURN foodItemName,foodItemPrice
    EXCEPT ERROR THEN
        DISPLAY "Invalid value entered"
    ENDTRY
ENDFUNCTION




FUNCTION writeNewFoodCategoryToFile(categoryName,categoryDescription)
    uppercaseName = categoryName WITH CALL upper()
    capitalizedDescription = categoryDescription WITH CALL capitalize()
    OPEN FILE FOOD_DETAILS_FILE IN APPEND MODE as foodDetailsFile
        WRITE newline INTO foodDetailsFile
        WRITE '_' * 88 INTO foodDetailsFile
        WRITE newline * 2 INTO foodDetailsFile
        WRITE uppercaseName + "FOOD CATEGORY - " + capitalizedDescription INTO foodDetailsFile
        WRITE newline INTO foodDetailsFile
        WRITE '_' * 88 INTO foodDetailsFile
    CLOSE FILE FOOD_DETAILS_FILE
ENDFUNCTION



FUNCTION writeNewFoodItemToFile(foodCategoryName,foodItemName,foodItemPrice)
    TRY
        orderRecordsList = []
        foodItemIndexes = []
        OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS f 
            FOR EACH row IN f:   
                APPEND [row] to orderRecordsList
            ENDFOR
        CLOSE FILE FOOD_DETAILS_FILE
        FOR data IN orderRecordsList
            IF (foodCategoryName IN data[0]) THEN
                APPEND orderRecordsList WITH CALL index(data) TO foodItemIndexes
            ENDIF
        ENDFOR
        IF (NOT foodItemIndexes) THEN
            newFoodID = foodCategoryName[0] + '1'
            lastFoodItemIndex = (orderRecordsList LENGTH)-1
        ELSE 
            lastFoodItemIndex = foodItemIndexes[-1]
            lastFoodItemRecord = orderRecordsFile[lastFoodItemIndex][0] WITH CALL split(" | ")
            newFoodID = lastFoodItemRecord[0][0] + (((lastFoodItemRecord[1] WITH CALL strip(lastFoodItemRecord[0][0]) AS INTEGER)+1) AS STRING)
        ENDIF
        IF (lastFoodItemIndex == ((orderRecordsFile LENGTH)-1)) THEN
            INSERT [newline + foodCategoryName + '|' + newFoodID + '|' + foodItemName + '|' + foodItemPrice AS STRING] INTO orderRecordsList AT lastFoodItemIndex+1
        ELSE
            INSERT [foodCategoryName + '|' + newFoodID + '|' + foodItemName + '|' + foodItemPrice AS STRING] INTO orderRecordsList AT lastFoodItemIndex+1
        ENDIF
        OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS foodDetailsFile
            FOR EACH data IN orderRecordsList:       
                WRITE data[0] INTO foodDetailsFile
            ENDFOR
        CLOSE FILE FOOD_DETAILS_FILE
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is corrupted!"
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is missing!"
    ENDTRY
ENDFUNCTION

FUNCTION displayFoodCategories()
    TRY  
        foodCategoriesList = CALL extractFoodCategories()
        count=1
        DOWHILE (count < foodCategoriesList LENGTH)):
            FOR EACH list IN foodCategoriesList
                DISPLAY count AS STRING + ". " + list[0] WITH CALL capitalize()
                DISPLAY(f'{count}. {list[0].capitalize()}')
                count+=1
    EXCEPT ERROR THEN 
        DISPLAY "Food details file is corrupted!"
    ENDTRY
ENDFUNCTION


FUNCTION extractFoodCategories()
    TRY
        rawList = []
        foodCategoryDetails = []
        OPEN FILE FOOD_DETAILS_FILE IN READ MODE as foodDetailsFile
            CALL skipFileLine(4,foodDetailsFile)
            FOR EACH line IN foodDetailsFile
                STRIP line
                REPLACE line FROM '_' TO ''
                SPLIT line BY ","
                APPEND line to rawList
            ENDFOR
        CLOSE FILE FOOD_DETAILS_FILE
        FOR EACH data IN CALL removeEmptyList(rawList)
            IF (" | " IN data[0]) THEN 
                index = rawList WITH CALL index(data)
                rawList = rawList WITH CALL pop(index)
            ENDIF
        ENDFOR
        FOR EACH list IN CALL removeEmptyList(rawList)
            FOR EACH data IN list
                LOOP i FROM 0 TO ((data LENGTH)-1) STEP 1
                    IF (data[i] == "-") THEN 
                        categoryTitle = '' WITH CALL join(data[0:i-1])
                        categoryDescription = '' WITH CALL join(data[i+2:-1])
                        APPEND categoryTitle, categoryDescription TO foodCategoryDetails
                    ENDIF
                    NEXT i
                ENDLOOP
            ENDFOR
        ENDFOR
        RETURN foodCategoryDetails         
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is corrupted!"
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is missing!"
    ENDTRY
ENDFUNCTION



'''Modify food item'''

FUNCTION modifyFoodItemMenu()
    foodDetailsList = []
    OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS foodDetailsFile
        FOR EACH row IN foodDetailsFile
            APPEND [row] TO foodDetailsList
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
    DISPLAY newline
    DISPLAY (" " * 5) + "1. UPDATE RECORD   " + "2. DELETE RECORD"
    DISPLAY newline
    DISPLAY "What would you like to do?"
    DOWHILE (True)
        TRY
            modifyChoice = (CALL userInput("Input 1 or 2",False)) AS INTEGER
            IF (modifyChoice == 1) THEN
                CALL clearConsole()
                CALL pageBanners("UPDATE FOOD ITEM",50)
                CALL updateFoodItemMenu(foodDetailsList)
            ELSE 
                IF (modifyChoice == 2) THEN
                    CALL clearConsole()
                    CALL pageBanners("DELETE FOOD ITEM",50)
                    CALL deleteFoodItemMenu(foodDetailsList)
                ELSE
                    DISPLAY "Number is out of range"
                    CONTINUE
                BREAK
                ENDIF
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "Please submit a number"
        ENDTRY
    ENDDO
ENDFUNCTION



FUNCTION updateFoodItemRecord(foodDetailsList, foodItemIdList, foodItemIdIndex)
    TRY
        DISPLAY newline
        DISPLAY "What would you like to update?"
        DISPLAY "1. Food Item Price"
        DISPLAY "2. Food Item Name"
        DISPLAY "3. Both"
        DOWHILE (True)
            updateCriteria = (CALL userInput("Update choice",True)) AS INTEGER
            IF (updateCriteria == 1) THEN
                newPrice = (CALL userInput("New food item price",False)) AS FLOAT
                newPrice = CALL format(newPrice,'.2f')
                IF ('\n' IN foodItemIdList[3]) THEN
                    foodItemIdList[3] = newPrice + '\n'
                ELSE
                    foodItemIdList[3] = newPrice
                ENDIF    
            ELSE 
                IF (updateCriteria == 2) THEN 
                    foodItemIdList[2] = CALL userInput("New food item name",False)
                ELSE 
                    IF (updateCriteria == 3) THEN
                        newPrice = CALL userInput("New food item price",False)
                        foodItemIdList[2] = CALL userInput("New food item name",False)
                        IF ('\n' IN foodItemIdList[3]) THEN
                            foodItemIdList[3] = newPrice + '\n'
                        ELSE
                            foodItemIdList[3] = newPrice
                        ENDIF  
                    ELSE
                        DISPLAY("Number out of range")
                        CONTINUE
                    BREAK
                    ENDIF
                ENDIF
            ENDIF
        ENDDO
    EXCEPT ERROR THEN
        DISPLAY "Food details file not found"
    EXCEPT ERROR THEN 
        DISPLAY "Please submit a number"
    ENDTRY
    foodDetailsList[foodItemIdIndex] = [" | " WITH CALL join(foodItemIdList)]
    OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS f
        FOR EACH data IN foodDetailsList
            WRITE data[0] INTO f
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
ENDFUNCTION



FUNCTION verifyFoodItemId(foodItemId,foodDetailsFile)
    IF (foodItemId == '') THEN
        RETURN False
    ELSE 
        IF ((foodItemId[0] WITH CALL isalpha()) AND (foodItemId[1 : (foodItemId LENGTH)] WITH CALL isdigit())) THEN
            FOR EACH data IN foodDetailsFile
                IF foodItemId IN data[0] THEN
                    RETURN True
                ENDIF
            ENDFOR
        ELSE 
            RETURN False
        ENDIF
    ENDIF
ENDFUNCTION

FUNCTION listOutFoodItems(chosenFoodCategoryName)
    DOWHILE (True)
        TRY
            CALL rogressBar("Retrieving food item records")
            CALL time.sleep(0.5)
            DISPLAY newline * 2
            DISPLAY "REPORT OF FOOD ITEMS IN " + (chosenFoodCategoryName WITH CALL upper())
            DISPLAY newline
            DISPLAY '-' * 24 + '-' * (chosenFoodCategoryName LENGTH)
            DISPLAY "FOOD ITEM ID   FOOD ITEM PRICE FOOD ITEM NAME"
            DISPLAY newline
            DISPLAY '-'*12 + ' '*4 + '-'*15 + ' '*2 + '-'*14
            FOR EACH data IN readFoodDetailsFile()
                IF (chosenFoodCategoryName WITH CALL replace("FOOD CATEGORY", ""), strip(), capitalize()) IN data THEN
                    DISPLAY data[1] data[3] data[2]
                ENDIF
            BREAK
            ENDFOR
        EXCEPT ERROR THEN
            DISPLAY "Please enter a number"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION deleteFoodItemRecord(userConfirmation, foodItemId, foodDetailsList)
    DOWHILE (True)
        TRY 
            IF (userConfirmation=="Y") THEN 
                FOR EACH data IN foodDetailsList
                    IF (foodItemId IN data[0]) THEN
                        index = foodDetailsList WITH CALL index(data)
                        foodDetailsList = foodDetailsList WITH CALL pop(index)
                    ENDIF
                    IF ('\n' IN foodDetailsList[-1][-1]) THEN 
                        temp = foodDetailsList[-1][-1] WITH CALL strip("\n")
                        foodDetailsList[-1][-1] = temp
                    ENDIF
                ENDFOR
                OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS f
                    FOR EACH data IN foodDetailsList
                        WRITE data[0] INTO f
                CLOSE FILE FOOD_DETAILS_FILE
                BREAK
            ELSE 
                CALL adminMenu()
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "Food details file is missing"
        ENDTRY
    ENDDO
ENDFUNCTION



'''Main Menu Page FOR Display'''

FUNCTION displayRecordsMenu()
    DISPLAY newline
    DISPLAY "1. Food Categories"
    DISPLAY "2. Food Items by Category"
    DISPLAY "3. Customer Orders"
    DISPLAY "4. Customer Payment"
    DISPLAY "0. Back to Admin  Menu"
    DOWHILE (True)
        TRY
            orderRecordsList = CALL readOrderRecordsFile()
            foodCategoryList = CALL extractFoodCategories()
            userSelection = (CALL userInput("Display all records of",True)) AS INTEGER
            IF (userSelection == 1) THEN  
                CALL progressBar("Generating report")
                CALL displayFoodCategoryRecords(foodCategoryList)
            ELSE 
                IF (userSelection == 2) THEN
                    DISPLAY newline
                    DISPLAY "Select the food category that you want to be displayed"
                    CALL displayFoodCategories()
                    chosenCategory = (CALL userInput("Food category",True)) AS INTEGER
                    CALL listOutFoodItems((foodCategoryList[chosenCategory-1][0]))
                ELSE 
                    IF (userSelection == 3) THEN
                        CALL progressBar("Generating report")
                        CALL displayOrderOrPaymentRecords('orders',orderRecordsList)
                    ELSE 
                        IF (userSelection == 4) THEN
                            CALL progressBar("Generating report")
                            CALL displayOrderOrPaymentRecords('payments',orderRecordsList)
                        ELSE 
                            IF (userSelection == 0) THEN
                                CALL adminMenu()
                            ELSE
                                DISPLAY "Number out of range"
                                CONTINUE LOOP
                            BREAK LOOP
                            ENDIF
                        ENDIF
                    ENDIF
                ENDIF
            ENDIF
        EXCEPT ERROR THEN 
            DISPLAY "Please enter a number"
        ENDTRY
    ENDDO
ENDFUNCTION



FUNCTION displayFoodCategoryRecords(foodCategoryList)
    DISPLAY newline
    DISPLAY "\t\tDETAILS OF FOOD CATEGORIES"
    DISPLAY newline
    DISPLAY "\t\t" + "-"*26
    DISPLAY "CATEGORY NAME(S)\t\tCATEGORY DESCRIPTION(S)"
    DISPLAY newline 
    DISPLAY '-'*15 + "\t\t\t" + '-'*22
    FOR EACH data IN foodCategoryList
        DISPLAY data[0],data[1]
    ENDFOR
ENDFUNCTION


FUNCTION displayOrderOrPaymentRecords(displayChoice,orderRecordsList)
    DISPLAY newline
    DISPLAY "\t\t\t\tREPORT OF ALL CUSTOMER" + displayChoice WITH CALL upper()
    DISPLAY newline
    DISPLAY "\t\t\t\t" + '-'*31
    DISPLAY newline
    IF (displayChoice == 'orders') THEN 
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tORDER STATUS\tFOOD ID (QUANTITY)"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*12 + ' '*4 + '-'*18
        FOR EACH data IN orderRecordsList
            DISPLAY data[0],data[1],data[3],data[7],data[2]
        ENDFOR
    ELSE
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tPAYMENT METHOD\tPAYMENT STATUS\tPAID ON"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*14 + ' '*2 + '-'*14 + ' '*2 + '-'*7
        FOR EACH data IN orderRecordsList
            DISPLAY data[0],data[1],data[3],data[4],data[5],data[6]
        ENDFOR
    ENDIF
ENDFUNCTION

'''Search Menu Main Page'''

FUNCTION searchRecordsMenu()
    DISPLAY newline
    DISPLAY "1. CUSTOMER ORDER RECORD\t2. CUSTOMER PAYMENT RECORD" WITH CALL center(50)
    DISPLAY newline
    DISPLAY "Which record do you want to check?"
    DOWHILE (True)
        TRY
            orderRecordsList = CALL readOrderRecordsFile()
            searchCategory = (CALL userInput("Input 1 or 2",False)) AS INTEGER
            IF (searchCategory == 1) THEN
                CALL clearConsole()
                CALL pageBanners("SEARCH CUSTOMER ORDER",50)
                CALL searchCustomerOrder(orderRecordsList)
            ELSE 
                IF (searchCategory == 2) THEN
                    CALL clearConsole()
                    CALL pageBanners("SEARCH CUSTOMER PAYMENT",50)
                    CALL searchCustomerPayment(orderRecordsList)
                ELSE
                    DISPLAY "The number you submitted is outside the allowed range!"
                ENDIF
            ENDIF
            BREAK LOOP
        EXCEPT ERROR THEN
            DISPLAY "Please enter a number!"
        ENDTRY
    ENDDO
ENDFUNCTION



'''Search Specific Customer Order Record'''
FUNCTION searchOrderByUsername(orderRecordsList)
    TRY
        recordByUsername = []
        username = CALL userInput("Please enter Customer Username",True)
        count = 0
        FOR EACH data IN orderRecordsList
            IF (username WITH CALL lower() == data[0]) THEN
                APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordByUsername
                count+=1
            ENDIF
        ENDFOR
        IF (count >=1) THEN
            DISPLAY count + " order records have been found for " + username
            CALL progressBar("Generating report")
            CALL time.sleep(0.5)
            CALL displaySearchResults('orders',username,recordByUsername)
        ELSE
            DISPLAY "No order records found for " + username
        ENDIF
    EXCEPT ERROR THEN
        DISPLAY "Invalid value submitted"
    ENDTRY
ENDFUNCTION


FUNCTION searchOrderById(orderRecordsList)
    orderID = CALL userInput("Please enter Order ID",True)
    recordById = []
    orderExists = False
    FOR EACH data IN orderRecordsList
        IF (orderID WITH CALL upper() == data[1]) THEN
            APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordById
            orderExists = True
        ENDIF
    ENDFOR
    IF (orderExists) THEN
        DISPLAY "1 Order record have been found for Order ID " + orderID WITH CALL upper()
        CALL progressBar("Generating report")
        CALL time.sleep(0.5)
        CALL displaySearchResults('orders',orderID,recordById)
    ELSE
        DISPLAY "No order records found for " + orderID WITH CALL upper()
    ENDIF
ENDFUNCTION


'''Search Specific Customer Payment Record'''
FUNCTION searchPaymentByUsername(paymentList)
    TRY
        recordByUsername = []
        username = CALL userInput("Please enter Customer Username",True)
        count = 0
        FOR EACH data IN paymentList:
            IF (username WITH CALL lower() == data[0]) THEN
                APPEND [data[0],data[1],data[3],data[4],data[5],data[6]] TO recordByUsername
                count+=1
            ENDIF
        ENDFOR
        IF (count >=1) THEN
            DISPLAY count + " payment records have been found for " + username
            CALL progressBar("Generating report")
            CALL time.sleep(0.5)
            CALL displaySearchResults('payments',username,recordByUsername)
        ELSE
            DISPLAY "No payment records found for " + username
        ENDIF
    EXCEPT ERROR THEN
        DISPLAY("Invalid value submitted")
    ENDTRY
ENDFUNCTION

FUNCTION searchPaymentById(paymentList)
    orderID = CALL userInput("Please enter Order ID",True)
    recordById = []
    orderIdExists = False
    FOR EACH data IN paymentList
        IF (orderID WITH CALL upper() == data[1]) THEN
            APPEND [data[0],data[1],data[3],data[4],data[5],data[6]] TO recordById
            orderIdExists = True
        ENDIF
    ENDFOR 
    IF (orderIdExists) THEN
        DISPLAY "1 payment record have been found for Order ID " + orderID WITH CALL upper()
        CALL progressBar("Generating report")
        CALL time.sleep(0.5)
        CALL displaySearchResults('payments',orderID,recordById)
    ELSE
        DISPLAY "No payment records found for " + orderID WITH CALL upper()
    ENDIF
ENDFUNCTION


'''Display Search Results'''
FUNCTION displaySearchResults(recordName,searchBasis,resultsList)
    IF (recordName == 'orders') THEN
        DISPLAY newline
        DISPLAY "\t\t\t\tORDER REPORT FOR " + searchBasis WITH CALL upper()
        DISPLAY newline 
        DISPLAY "\t\t\t\t" + '-'*(searchBasis LENGTH) + '-'*17
        DISPLAY newline
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tORDER STATUS\tFOOD ID(QUANTITY)"
        DISPLAY newline 
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*12 + ' '*4 + '-'*17
        FOR EACH data IN resultsList
            DISPLAY data[0] WITH CALL upper(),data[1],data[3],data[4],data[2]     
        ENDFOR
    ELSE
        DISPLAY newline
        DISPLAY "\t\t\t\tPAYMENT REPORT FOR " + searchBasis WITH CALL upper()
        DISPLAY newline 
        DISPLAY "\t\t\t\t" + '-'*19 + '-'*(searchBasis LENGTH)
        DISPLAY newline
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tPAYMENT METHOD\tPAYMENT STATUS\tPAID ON"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*14 + ' '*2 + '-'*14 + ' '*2 + '-'*7}
        FOR EACH data IN resultsList
            DISPLAY data[0] WITH CALL upper(),data[1],data[2],data[3],data[4],data[5]
        ENDFOR
    ENDIF
ENDFUNCTION


'''DECLARING FUNCTIONS FOR GUEST DASHBOARD'''

FUNCTION guestMenu(): #Guest Dashboard Main Page

    DOWHILE True:

        clearConsole()

        pageBanners("GUEST DASHBOARD", 50)

        DISPLAY("\nPlease select any option below.")

        DISPLAY("1. View Menu","2. Customer Login", "3. New Customer Registration", "\n0. Back to Main Menu", sep='\n')

        READ = userInput("Choice",True)

        IF READ == "1":

            viewCategoryList()

        ELSE IF READ == "2":

            customerLoginPage()

            regCustomerMenu()

        ELSE IF READ == "3":

            pageBanners("NEW ACCOUNT",50)

            customerRegistration()

        ELSE IF READ == "0":

            break

        ELSE

            # invalidInput()

            guestMenu()

        

'''View all food items as per category'''

FUNCTION viewCategoryList() :

    DOWHILE True:

        clearConsole()

        pageBanners("MENU CATEGORIES",50)

        DISPLAY("\n")

        displayFoodCategories()

        DISPLAY("\n0. Back To Guest Menu")

        TRY:

            DISPLAY("\nSelect the food category that you want to be displayed")

            chosenCategory = int(userInput("Food category",True))

            IF chosenCategory == 0 :

                break

            ELSE IF chosenCategory <= 4 :

                listOutFoodItemsNoDetails((extractFoodCategories()[chosenCategory-1][0]))

            else :

                DISPLAY("\nNumber out of range!")

                time.sleep(1.5)

                viewCategoryList()

        except ValueError:

            DISPLAY("\nPlease enter a number!")

            time.sleep(1.5)

            viewCategoryList()



'''List out food items without details (Price and Descriptions)'''

FUNCTION listOutFoodItems(chosenFoodCategoryName)
    DOWHILE (True)
        TRY
            CALL rogressBar("Retrieving food item records")
            CALL time.sleep(0.5)
            DISPLAY newline * 2
            DISPLAY "REPORT OF FOOD ITEMS IN " + (chosenFoodCategoryName WITH CALL upper())
            DISPLAY newline
            DISPLAY '-' * 24 + '-' * (chosenFoodCategoryName LENGTH)
            DISPLAY "FOOD ITEM ID   FOOD ITEM PRICE FOOD ITEM NAME"
            DISPLAY newline
            DISPLAY '-'*12 + ' '*4 + '-'*15 + ' '*2 + '-'*14
            FOR EACH data IN readFoodDetailsFile()
                IF (chosenFoodCategoryName WITH CALL replace("FOOD CATEGORY", ""), strip(), capitalize()) IN data THEN
                    DISPLAY data[1] data[3] data[2]
                ENDIF
            BREAK
            ENDFOR
        EXCEPT ERROR THEN
            DISPLAY "Please enter a number"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION updateFoodItemMenu(foodDetailsList)
    DOWHILE (True)
        TRY
            foodCategoryTitles = CALL extractFoodCategories()
            DISPLAY newline
            DISPLAY "In which category would you like to update the food item?"
            CALL displayFoodCategories()
            categoryNumber = (CALL userInput("Category number",True)) AS INTEGER
            IF (0 < categoryNumber <= (foodCategoryTitles LENGTH) THEN
                CALL listOutFoodItems(foodCategoryTitles[categoryNumber-1][0])
                foodItemId = CALL userInput("Enter the Food Item ID that you would like to update",True) WITH CALL upper()
                IF (CALL verifyFoodItemId(foodItemId, foodDetailsList)) THEN
                    DISPLAY "Food Item ID Selected: " + foodItemId
                    FOR EACH data in foodDetailsList
                        IF foodItemId IN data[0] THEN
                            foodItemIdList = data[0] WITH CALL split(" | ")
                            foodItemIdIndex = foodDetailsList WITH CALL index(data)
                        ENDIF
                    ENDFOR
                    CALL updateFoodItemRecord(foodDetailsList, foodItemIdList, foodItemIdIndex)
                    BREAK
                ELSE 
                    DISPLAY "Invalid Food Item ID"
                ENDIF
            ELSE
                DISPLAY "Number is out of range"
            ENDIF
        EXCEPT ERROR THEN 
            DISPLAY "Please submit a number"
            CONTINUE
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION deleteFoodItemMenu(foodDetailsList)
    DOWHILE (True)
        TRY
            foodCategoryTitles = CALL extractFoodCategories()
            DISPLAY newline
            DISPLAY "In which category would you like to delete the food item?"
            CALL displayFoodCategories()
            categoryNumber = (CALL userInput("Category number",True)) AS INTEGER
            IF (0 < categoryNumber <= (foodCategoryTitles LENGTH) THEN
                CALL listOutFoodItems(foodCategoryTitles[categoryNumber-1][0])
                foodItemId = CALL userInput("Enter the Food Item ID that you would like to delete",True) WITH CALL upper()
                IF (CALL verifyFoodItemId(foodItemId, foodDetailsList)) THEN
                    DISPLAY "Are you sure you want to delete " + foodItemId +"?"
                    userConfirmation = CALL userInput("(Y)es/(N)o",True) WITH CALL upper()
                    IF (userConfirmation IN ('Y','N') THEN
                        CALL deleteFoodItemRecord(userConfirmation, foodItemId, foodDetailsList)
                        BREAK
                    ELSE 
                        DISPLAY "Invalid input"
                    ENDIF
                ELSE
                    DISPLAY "Invalid Food Item ID"
                ENDIF
            ELSE
                DISPLAY "Invalid Food Category Number"
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "Please submit a number"
        ENDTRY
    ENDDO
ENDFUNCTION

'''New customer registration to access other details'''



'''DECLARING FUNCTIONS FOR REGISTERED CUSTOMER DASHBOARD'''

'''Login to access system'''

FUNCTION customerLoginPage():

    DOWHILE True:

        clearConsole()

        pageBanners("Login as Customer", 50)

        TRY: 

            uName = userInput("Username",True)

            progressBar("Checking IF username exists")

            time.sleep(0.05)

            IF (authUsername(uName,readCustomerDetailsFile())):

                DISPLAY(" Username found, please enter password\n")

                DOWHILE True:

                    uPass = userInput("Password",True)

                    IF (authPassword(uName, uPass,readCustomerDetailsFile())):

                        progressBar("Logging you in")

                        time.sleep(0.05)

                        break

                    ELSE

                        DISPLAY("Incorrect password, please retry\n")

            ELSE 

                DISPLAY(" Username NOT found, please retry")

                continue

            break

        except TypeError:

            DISPLAY("Customers details file is corrupted!")

            break



FUNCTION regCustomerMenu(): #Customer menu upon successful login

    DOWHILE True:

        clearConsole()

        pageBanners("Customer Menu", 50)

        DISPLAY("\nWelcome!, what would you like to do today?")

        DISPLAY("1. View Item List", "2. View Item Details", "3. Add Food to Cart", "4. Checkout", "\n0. Main Menu", sep='\n')

        READ = userInput("Choice",True)

        IF READ == "1":

            clearConsole()

            viewItemList()

        ELSE IF READ =="2":

            viewItemDetail()

        ELSE IF READ == "3":

            addFoodToCart()

        ELSE IF READ =="4":

            checkout()

        ELSE IF READ == "0":

            break

        else:pass

            # invalidInput()



'''View detail of food category'''

'''View detail of food items'''

'''Select food item and add to cart'''

'''Do payment to confirm order'''



'''DECLARING MAIN GREETING PAGE'''

FUNCTION main(): #The main module that will be executed first

    DOWHILE True:

        clearConsole()

        DISPLAY(" ____   ___  _____ ____".center(78))

        DISPLAY("/ ___| / _ \|  ___/ ___|".center(78))

        DISPLAY("\___ \| | | | |_  \___ \\".center(78))

        DISPLAY(" ___) | |_| |  _|  ___) |".center(80))

        DISPLAY("|____/ \___/|_|   |____/".center(78))

        DISPLAY("")

        DISPLAY(f' {"Welcome to the Online Food Ordering Management System"} '.center(85, '='))

        time.sleep(1)

        DISPLAY("\nWho are you logging IN as?", "1. Admin", "2. Customer", "3. Quit Program", sep=' \n')

        TRY:

            READ = int(userInput("Login as (1/2/3)",True))

            IF READ == 1 :

                clearConsole()

                pageBanners("ADMIN LOGIN PAGE",50)

                adminLoginPage()

            ELSE IF READ == 2 :

                guestMenu() 

            ELSE IF READ== 3 :

                quit()

            ELSE

                DISPLAY("Out of range, please enter a number between 1 and 3")

            break

        except ValueError:

            DISPLAY("You entered an alphabet, please enter a number between 1 and 3")

            



'''EXECUTE MAIN'''



DISPLAY("File one __name__ is set to: {}" .format(__name__))



IF __name__ == '__main__': 

    TRY:

        main()

    except KeyboardInterrupt:

        quit()

    

'''Empty functions'''

FUNCTION order() :

    clearConsole()

    DISPLAY("\nPlease select any option below.")

    DISPLAY("1. Cancel an order","2. Back to Main Menu","0. Back",sep='\n')

    READ = userInput("Choice",True)

    IF READ == "1" : 

        cancelOrder() 

    ELSE IF READ == "2" :

        main()

    ELSE IF READ == "0" :

        adminMenu()

    else : 

        # invalidInput()

        order()



FUNCTION cancelOrder() : PASS

FUNCTION checkPayment() : PASS

FUNCTION viewItemList() : PASS

FUNCTION registered() : PASS

FUNCTION viewItemDetail() : PASS

FUNCTION viewCategoryDetail() : PASS

FUNCTION addFoodToCart() : PASS

FUNCTION checkout() : PASS

FUNCTION logout() : PASS

FUNCTION customerRegistration() : PASS 
