FUNCTION initialProgramCheck()
    DISPLAY " PRE-PROGRAM CHECKS " AS center(85,"=")
    DISPLAY " File Existence Check " AS center(85,'=')
    files = [FOOD_DETAILS_FILE, CUSTOMER_DETAILS_FILE, ADMIN_DETAILS_FILE, ORDER_RECORDS_FILE]
    FOR EACH file IN files
        DISPLAY "Checking if " + file + "exists"
        CALL time.sleep(0.5)
        IF (CALL os.path.exists(file)) THEN 
            DISPLAY " -> " + file + "exists"
        ELSE
            DISPLAY " ->" + file + "not found"
            DISPLAY "ERROR: Program failed to execute"
            CALL exit()
        ENDIF
    ENDFOR
    DISPLAY " Data Existence Check " AS center(85,'=')
    FOR EACH file IN files
        contentList = []
        DISPLAY "Checking for data presence in " + file
        CALL time.sleep(0.5)
        OPEN FILE file AS dataFile
            CALL skipFileLine(6,dataFile)
            FOR EACH line IN dataFile
                APPEND line TO contentList
            ENDFOR
        CLOSE FILE file
        IF (contentList == []) THEN
            DISPLAY " -> No data in " + file
            DISPLAY " ERROR: Program failed to execute"
            CALL exit()
        ELSE
            DISPLAY " -> Data exists in " + file
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION clearConsole()
    IF (CALL os.name IN ("nt", "dos")) THEN  
        CALL os.system("cls")
    ELSE
        CALL os.system("clear")
    ENDIF
ENDFUNCTION
    
FUNCTION quit() 
    DISPLAY newline
    DISPLAY "Thank you! Please come again" AS center(85,'=')
    CALL time.sleep(0.5)
    CALL exit()
ENDFUNCTION
	
FUNCTION userInput(promptMessage, skipLine) 
    IF (skipLine) THEN
        DISPLAY newline
        DISPLAY promptMessage + " >> "
        READ input
        RETURN input 
    ELSE
        DISPLAY promptMessage + " >> "
        READ input
        RETURN input 
    ENDIF
ENDFUNCTION

FUNCTION authUsername(username,detailsList)
    FOR EACH data IN detailsList
        IF (username == data[0]) THEN
            RETURN True
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION authPassword(username, password, detailsList) 
    FOR EACH data IN detailsList
        IF ((username == data[0]) AND (password == data[1])) THEN
            RETURN True
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION skipFileLine(count, fileHandle) 
    LOOP i FROM 0 TO (count-1) STEP 1
        CALL next(fileHandle) 
        NEXT i 
    ENDLOOP
ENDFUNCTION

FUNCTION removeEmptyList(sourceList)
    updatedList = []
    FOR EACH data IN sourceList
        DOWHILE ('' IN data)
            REMOVE ('') FROM data
        ENDDO
        IF data != [] THEN
            APPEND data TO updatedList
        ENDIF
    ENDFOR
    RETURN updatedList
ENDFUNCTION

FUNCTION progressBar(loadingMessage)
    DISPLAY loadingMessage + "..."
    animation = ["[■□□□□□□□□□]","[■■□□□□□□□□]", "[■■■□□□□□□□]", "[■■■■□□□□□□]", "[■■■■■□□□□□]", 
                  "[■■■■■■□□□□]", "[■■■■■■■□□□]", "[■■■■■■■■□□]", "[■■■■■■■■■□]", "[■■■■■■■■■■]"]
    FOR EACH item IN animation
        CALL time.sleep(0.05)
        CALL time.sleep(0.05)
        DISPLAY "\r" + item AS end = "" 
    ENDFOR
ENDFUNCTION

FUNCTION pageBanners(pageTitle, centerLength)
    DISPLAY "\t" + "_" * (pageTitle LENGTH)
    DISPLAY newline
    DISPLAY "\t" + pageTitle
    DISPLAY "\t" + "_" * (pageTitle LENGTH)
ENDFUNCTION

FUNCTION readAdminDetailsFile()  
    adminDetailsList = [] 
    OPEN FILE ADMIN_DETAILS_FILE IN READ MODE AS adminDetailsFile
        CALL skipFileLine(6,adminDetailsFile)
        FOR EACH row IN adminDetailsFile
            STRIP row BY "\n"
            REPLACE row FROM " | " TO " "
            SPLIT row BY " "
            APPEND row to adminDetailsList
        ENDFOR
    CLOSE FILE ADMIN_DETAILS_FILE   
    RETURN adminDetailsList
ENDFUNCTION

FUNCTION readFoodDetailsFile()
    foodItemsList=[]
    OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS foodDetailsFile
        CALL skipFileLine(6,foodDetailsFile) 
        FOR EACH row IN foodDetailsFile
            IF (row[0] == "_") THEN
                CALL skipFileLine(3,foodDetailsFile)
            ENDIF
            REPLACE row FROM "\n" TO ""
            REPLACE row FROM "_" TO ""
            SPLIT row BY " | "
            APPEND row to foodItemsList
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
    foodItemsList = CALL removeEmptyList(foodItemsList)
    RETURN foodItemsList
ENDFUNCTION

FUNCTION readOrderRecordsFile()
    orderDetailsList = []
    OPEN FILE ORDER_RECORDS_FILE IN READ MODE AS orderRecordsFile
        CALL skipFileLine(6,orderRecordsFile)
        FOR EACH row IN orderRecordsFile
            STRIP row BY '\n'
            SPLIT row BY " | "
            APPEND row TO orderDetailsList
        ENDFOR
    CLOSE FILE ORDER_RECORDS_FILE
    RETURN orderDetailsList
ENDFUNCTION

FUNCTION readCustomerDetailsFile()
    customerDetailsList = [] 
    TRY
        OPEN "./customerDetails.txt" IN READ MODE AS customerDetailsFile
            CALL skipFileLine(6,customerDetailsFile)
            FOR EACH row IN customerDetailsFile
                STRIP row BY "\n"
                REPLACE row FROM " | " TO " "
                SPLIT row BY " "
                APPEND row TO customerDetailsList
            ENDFOR
        CLOSE FILE "./customerDetails.txt"
        RETURN customerDetailsList  
    EXCEPT ERROR THEN
        DISPLAY "Customers database is missing!" 
    ENDTRY
ENDFUNCTION      

FUNCTION adminLoginPage()
    adminDetailsList = CALL readAdminDetailsFile()
    usernameExists = False
    DOWHILE (NOT usernameExists) 
        uName = CALL userInput("Username",True) AS lower()
        IF (uName == "") THEN 
            DISPLAY "ERROR: Username not submitted"
            CONTINUE LOOP
        ENDIF
        CALL progressBar("Authenticating username")
        CALL time.sleep(0.05)
        usernameExists = CALL authUsername(uName,adminDetailsList)
        IF (usernameExists) THEN
            DISPLAY " Username found, please enter password"
            DISPLAY newline
        ELSE
            DISPLAY " ERROR: Username not found"
            DISPLAY newline
        ENDIF
    ENDDO
    DOWHILE (usernameExists)
        uPass = CALL userInput("Password",True)
        IF (uPass == "") THEN
            DISPLAY "ERROR: Password not submitted"
            CONTINUE LOOP
        ENDIF
        CALL progressBar("Authenticating password")
        CALL time.sleep(0.05)
        passwordMatch = CALL authPassword(uName, uPass,adminDetailsList)
        IF (passwordMatch) THEN
            CALL adminMenu(uName)
            BREAK LOOP  
        ELSE 
            DISPLAY " ERROR: Incorrect password"
        ENDIF
    ENDDO
ENDFUNCTION



FUNCTION adminMenu(uName="Admin")
    CHOICES = [[1, "ADD NEW FOOD ITEM", addFoodItemMenu], [2, "MODIFY FOOD ITEM", modifyFoodItemMenu], 
                [3, "DISPLAY RECORDS", displayRecordsMenu], [4, "SEARCH RECORDS", searchRecordsMenu]]
    CALL clearConsole()
    CALL pageBanners("ADMIN DASHBOARD",50)
    DISPLAY newline
    DISPLAY "What would you like to do today?"
    DISPLAY newline
    DISPLAY "1. Add food item"
    DISPLAY "2. Modify food item"
    DISPLAY "3. Display records"
    DISPLAY "4. Search record"
    DISPLAY "0. Log out"
    DOWHILE (True)
        TRY
            userSelection = (CALL userInput("I would like to",True)) AS INTEGER
            IF (userSelection == 0) THEN
                CALL progressBar("Logging out")
                CALL main()
            ELSE
                IF (userSelection > choices LENGTH OR userSelection < 0) THEN
                    print("ERROR: Number is out of range")
                    CALL time.sleep(0.1)
                    CONTINUE LOOP
                ENDIF
            ENDIF
            FOR EACH choice IN CHOICES
                IF (userSelection == choice[0]) THEN
                    CALL clearConsole()
                    CALL pageBanners(choice[1],50)
                    CALL choice[2]()
                ENDIF
            ENDFOR
            BREAK LOOP 
        EXCEPT ERROR THEN
            DISPLAY "ERROR: Foreign character submitted"
            CALL time.sleep(0.1) 
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION addFoodItemMenu()
    foodCategoryTitles = CALL extractFoodCategoryTitles()
    DISPLAY newline
    DISPLAY "In which category would you like to add the food item?"
    DISPLAY newline
    CALL displayFoodCategories()
    DISPLAY newline
    DISPLAY (foodCategoryTitles LENGTH) + 1 AS STRING + ". " + "Add new food category"
    DISPLAY "0. Back to Admin Menu"
    DOWHILE (True)
        TRY
            chosenFoodCategoryNumber = (CALL userInput("Food Category Number",True)) AS INTEGER
            IF (chosenFoodCategoryNumber == (foodCategoryTitles LENGTH) + 1) THEN
                CALL writeNewFoodCategoryToFile()
                CALL time.sleep(0.5)
                CALL adminMenu()
            ELSE 
                IF (0 < chosenFoodCategoryNumber <= (foodCategoryTitles LENGTH)) THEN
                    chosenFoodCategoryName = foodCategoryTitles[chosenFoodCategoryNumber-1][0] AS replace("FOOD CATEGORY",""), strip(), capitalize()
                    CALL getNewFoodItemDetails(chosenFoodCategoryName)  
                    CALL time.sleep(0.5)
                    CALL adminMenu()
                ELSE    
                    IF (chosenFoodCategoryNumber == 0) THEN
                        CALL adminMenu()
                    ELSE
                        DISPLAY "ERROR: Food category number out of range"
                        CALL time.sleep(0.1)
                        CONTINUE LOOP
                    ENDIF
                ENDIF
            ENDIF
            BREAK LOOP
        EXCEPT ERROR THEN
            DISPLAY "ERROR: Foreign character submitted"
            CALL time.sleep(0.1)
        ENDTRY
    ENDDO 
ENDFUNCTION

FUNCTION getNewFoodItemDetails(chosenFoodCategoryName)
    validFoodItemName = False
    validFoodItemPrice = False
    DOWHILE(NOT validFoodItemName)
        foodItemName = CALL userInput("\nNew Food Item Name",False)
        IF (foodItemName == "" OR foodItemName AS isdigit()) THEN
            DISPLAY "ERROR: Invalid food item name!"
            CONTINUE LOOP
        ELSE 
            IF ((foodItemName LENGTH) < 5) THEN
                DISPLAY "ERROR: Food item name cannot be less than 5 characters!"
                CONTINUE LOOP
            ELSE
                validFoodItemName = True
            ENDIF
        ENDIF
    ENDDO
    DOWHILE(NOT validFoodItemPrice)
        TRY
            foodItemPrice = (CALL userInput("\nNew Food Item Price",False)) AS FLOAT 
            IF (foodItemPrice == 0.0 OR foodItemPrice < 0.0) THEN
                DISPLAY "ERROR: Invalid food item price"
                CONTINUE LOOP
            ELSE
                validFoodItemPrice = True
                foodItemPrice = CALL format(foodItemPrice, ".2f")
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "ERROR: Please enter a valid food item price"
        ENDTRY
    ENDDO
    DISPLAY newline
    DISPLAY "FOOD CATEGORY\tFOOD ITEM PRICE\t FOOD ITEM NAME"
    DISPLAY newline
    DISPLAY chosenFoodCategoryName,foodItemPrice,foodItemName
    DISPLAY newline
    DISPLAY "Please confirm the new food details you would like to add"
    DOWHILE (True)
        userConfirmation = CALL userInput("(Y)es/(N)o",False) AS upper()
        IF (userConfirmation == 'Y') THEN
            CALL progressBar("Writing to file")
            CALL time.sleep(0.5)
            CALL writeNewFoodItemToFile(chosenFoodCategoryName,foodItemName,foodItemPrice)
        ELSE 
            IF (userConfirmation == 'N') THEN
                CALL addFoodItemMenu()
            ELSE 
                DISPLAY newline
                DISPLAY "ERROR: Please enter either Y or N"
                CONTINUE LOOP
            ENDIF
        ENDIF
        BREAK LOOP
    ENDDO
ENDFUNCTION

FUNCTION writeNewFoodCategoryToFile(categoryName,categoryDescription)
    addFoodCategoryConfirmation = False
    foodCategoryName = CALL userInput("\nNew Food Category Name",False) AS upper()
    foodCategoryDescription = CALL userInput("\nNew Food Category Description",False) AS capitalize()
    DISPLAY newline
    DISPLAY "FOOD CATEGORY NAME\tFOOD CATEGORY DESCRIPTION"
    DISPLAY newline
    DISPLAY foodCategoryName,foodCategoryDescription
    DISPLAY newline
    DISPLAY "Please confirm the new food category you would like to add"
    DOWHILE (NOT addFoodCategoryConfirmation)
        userConfirmation = CALL userInput("(Y)es/(N)o",False) AS upper()
        IF (userConfirmation == 'Y') THEN
            CALL progressBar("Adding new food category")
            CALL time.sleep(0.5)
            OPEN FILE FOOD_DETAILS_FILE IN APPEND MODE as foodDetailsFile
                WRITE newline INTO foodDetailsFile
                WRITE '_' * 88 INTO foodDetailsFile
                WRITE newline * 2 INTO foodDetailsFile
                WRITE foodCategoryName + "FOOD CATEGORY - " + foodCategoryDescription INTO foodDetailsFile
                WRITE newline INTO foodDetailsFile
                WRITE '_' * 88 INTO foodDetailsFile
                addFoodCategoryConfirmation = True
            CLOSE FILE FOOD_DETAILS_FILE
            DISPLAY " Success!"
        ELSE 
            IF (userConfirmation == 'N') THEN
                CALL addFoodItemMenu()
            ELSE
                DISPLAY newline
                DISPLAY "ERROR: Please enter either Y or N"
                CONTINUE LOOP
            ENDIF
        ENDIF
        BREAK LOOP
    ENDDO
    DOWHILE addFoodCategoryConfirmation
        DISPLAY newline
        DISPLAY "Would you like to add a new food item in this category?"
        userConfirmation = CALL userInput("(Y)es/(N)o",False) AS upper()
        IF (userConfirmation == 'Y') THEN
            CALL getNewFoodItemDetails(foodCategoryName AS capitalize())
        ELSE 
            IF (userConfirmation == 'N') THEN
                CALL addFoodItemMenu()
            ELSE
                DISPLAY "ERROR: Please enter either Y or N"
                CONTINUE LOOP
            ENDIF
        ENDIF
        BREAK LOOP
    ENDDO
ENDFUNCTION

FUNCTION writeNewFoodItemToFile(foodCategoryName,foodItemName,foodItemPrice)
    foodItemsList = []   
    OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS f 
        FOR EACH row IN f
            APPEND [row] to foodItemsList
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
    FOR data IN foodItemsList
        IF (foodCategoryName AS capitalize() == data[0][0:(foodCategoryName LENGTH)]) THEN
            APPEND index(data) TO foodItemIndexes
        ENDIF
    ENDFOR
    IF (foodItemIndexes == []) THEN
        newFoodID = foodCategoryName[0] + '1'
        FOR EACH data IN foodItemsList
            IF (foodCategoryName AS upper() == data[0][0:(foodCategoryName LENGTH)]) THEN
                lastFoodItemIndex = index(data) + 1
            ENDIF
        ENDFOR
    ELSE 
        lastFoodItemIndex = foodItemIndexes[-1]
        lastFoodItemRecord = foodItemsList[lastFoodItemIndex][0] AS split(" | ")
        newFoodID = lastFoodItemRecord[0][0] + (((lastFoodItemRecord[1][1]) AS INTEGER)+1) AS STRING
    ENDIF
    IF (lastFoodItemIndex == ((foodItemsList LENGTH)-1)) THEN
        INSERT [newline + foodCategoryName + '|' + newFoodID + '|' + foodItemName + '|' + foodItemPrice AS STRING] INTO foodItemsList AT lastFoodItemIndex+1
    ELSE
        INSERT [foodCategoryName + '|' + newFoodID + '|' + foodItemName + '|' + foodItemPrice AS STRING] INTO foodItemsList AT lastFoodItemIndex+1
    ENDIF
    OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS foodDetailsFile
        FOR EACH data IN foodItemsList   
            WRITE data[0] INTO foodDetailsFile
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
    DISPLAY " Success!"
ENDFUNCTION

FUNCTION displayFoodCategories()
    foodCategoriesList = CALL extractFoodCategoryTitles()
    FOR EACH list IN foodCategoriesList
        DISPLAY ((index OF list) + 1) AS STRING + ". " + list[0] AS capitalize() 
    ENDFOR
ENDFUNCTION


FUNCTION extractFoodCategoryTitles()
    rawList = []
    foodCategoryDetails = []
    OPEN FILE FOOD_DETAILS_FILE IN READ MODE as foodDetailsFile
        CALL skipFileLine(4,foodDetailsFile)
        FOR EACH line IN foodDetailsFile
            STRIP line
            REPLACE line FROM '_' TO ''
            SPLIT line BY ","
            APPEND line to rawList
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
    rawList = CALL removeEmptyList(rawList)
    FOR EACH data rawList
        IF (" | " IN data[0]) THEN 
            index = index(data)
            rawList = rawList AS pop(index)
        ENDIF
    ENDFOR
    FOR EACH list IN rawList
        FOR EACH data IN list
            LOOP i FROM 0 TO ((data LENGTH)-1) STEP 1
                IF (data[i] == "-") THEN 
                    categoryTitle = '' AS join(data[0:i-1])
                    categoryDescription = '' AS join(data[i+2:-1])
                    APPEND categoryTitle, categoryDescription TO foodCategoryDetails
                ENDIF
                NEXT i
            ENDLOOP
        ENDFOR
    ENDFOR
    RETURN foodCategoryDetails         
ENDFUNCTION

FUNCTION modifyFoodItemMenu()
    foodDetailsList = []
    OPEN FILE "./foodDetails.txt" IN READ MODE AS foodDetailsFile
        FOR EACH row IN foodDetailsFile
            APPEND [row] TO foodDetailsList
        ENDFOR
    CLOSE FILE "./foodDetails.txt"
    DISPLAY newline
    DISPLAY "What update do you intend to perform?"
    DISPLAY newline
    DISPLAY "1. Update Record"
    DISPLAY "2. Delete Record"
    DISPLAY newline
    DISPLAY "0. Back to Admin Menu"
    DOWHILE (True)
        TRY
            modifyChoice = (CALL userInput("\nI would like to (Number) ",False)) AS INTEGER
            IF (modifyChoice == 0) THEN 
                CALL adminMenu()
            ELSE
                IF (modifyChoice == 1) THEN
                    CALL clearConsole()recycle
                    CALL pageBanners("UPDATE FOOD ITEM",50)
                    CALL updateFoodItemMenu(foodDetailsList)
                    CALL time.sleep(0.5)singapore international foundation
                    CALL adminMenu()
                ELSE 
                    IF (modifyChoice == 2) THEN
                        CALL clearConsole()
                        CALL pageBanners("DELETE FOOD ITEM",50)
                        CALL deleteFoodItemMenu(foodDetailsList)
                        CALL time.sleep(0.5)
                        CALL adminMenu()
                    ELSE
                        DISPLAY newline
                        DISPLAY "ERROR: Number is out of range"
                        CONTINUE LOOP
                    ENDIF
                ENDIF
            ENDIF
            BREAK LOOP
        EXCEPT ERROR THEN
            DISPLAY newline
            DISPLAY "ERROR: Foreign character submitted"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION updateFoodItemRecord(foodDetailsList, foodItemIdList, foodItemIdIndex)
    validUpdateChoice = False
    DISPLAY newline
    DISPLAY "What would you like to update?"
    DISPLAY "1. Food Item Price"
    DISPLAY "2. Food Item Name"
    DISPLAY "3. Both"
    DOWHILE (NOT validUpdateChoice)
        TRY
            updateCriteria = (CALL userInput("Update choice",True)) AS INTEGER
            IF (updateCriteria <= 0 OR updateCriteria > 3) THEN
                DISPLAY "ERROR: Out of range"
            ELSE
                validUpdateChoice = True
            ENDIF
        EXCEPT ERROR THEN 
            DISPLAY "ERROR: Foreign character submitted"
        ENDTRY
    ENDDO
    DOWHILE validUpdateChoice
        TRY
            IF (updateCriteria == 1) THEN
                newPrice = CALL userInput("New food item price",False)
                newPrice = CALL format(float(newPrice),'.2f')
                IF '\n' IN foodItemIdList[3] THEN
                    foodItemIdList[3] = newPrice + '\n'
                ELSE
                    foodItemIdList[3] = newPrice
                ENDIF
            ENDIF
            IF (updateCriteria == 2) THEN
                foodItemIdList[2] = CALL userInput("New food item name",False)
            ENDIF
            IF (updateCriteria == 3) THEN
                newPrice = CALL userInput("New food item price",False)
                newPrice = CALL format(float(newPrice),'.2f')
                foodItemIdList[2] = CALL userInput("New food item name",False)
                IF '\n' IN foodItemIdList[3] THEN
                    foodItemIdList[3] = newPrice + '\n'
                ELSE
                    foodItemIdList[3] = newPrice
                ENDIF        
            ENDIF
        EXCEPT ERROR THEN 
            DISPLAY newline
            DISPLAY "ERROR: Foreign character submitted"
            CONTINUE LOOP
        ENDTRY
        BREAK LOOP
    ENDDO
    CALL progressBar("Making changes")
    foodDetailsList[foodItemIdIndex] = [" | " AS join(foodItemIdList)]
    OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS f
        FOR EACH data IN foodDetailsList
            WRITE data[0] INTO f
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
    DISPLAY " Success!"
    CALL time.sleep(0.2)  
ENDFUNCTION

FUNCTION verifyFoodItemId(foodItemId,foodDetailsList)
    IF (foodItemId == '') THEN
        RETURN False
    ELSE 
        IF ((foodItemId[0] AS isalpha()) AND (foodItemId[1 : (foodItemId LENGTH)] AS isdigit())) THEN
            FOR EACH data IN foodDetailsList
                IF foodItemId IN data[0] THEN
                    RETURN True
                ENDIF
            ENDFOR
        ELSE 
            RETURN False
        ENDIF
    ENDIF
ENDFUNCTION

FUNCTION verifyFoodCategoryNumber()
    validCategoryNumber = False
    foodCategoryTitles = CALL extractFoodCategoryTitles()
    DOWHILE (NOT validCategoryNumber)
        TRY
            categoryNumber = (CALL userInput("Food category number",True) AS INTEGER)
            IF (0 < categoryNumber <= (foodCategoryTitles LENGTH)) THEN
                validCategoryNumber = True
                CALL listOutFoodItems(foodCategoryTitles[categoryNumber-1][0])
            ELSE 
                IF (categoryNumber == 0) THEN
                    CALL adminMenu()
                ELSE
                    DISPLAY "ERROR: Food category number out of range"
                ENDIF
            ENDIF
        EXCEPT ERROR THEN 
            DISPLAY "ERROR: Foreign character submitted"
        ENDTRY
    ENDDO
    RETURN validCategoryNumber
ENDFUNCTION

FUNCTION listOutFoodItems(chosenFoodCategoryName)
    foodItemDetails = CALL readFoodDetailsFile()
    CALL progressBar("Retrieving food item records")
    CALL time.sleep(0.5)
    DISPLAY newline * 2
    DISPLAY "REPORT OF FOOD ITEMS IN " + (chosenFoodCategoryName AS upper())
    DISPLAY newline
    DISPLAY '-' * 24 + '-' * (chosenFoodCategoryName LENGTH)
    DISPLAY "FOOD ITEM ID   FOOD ITEM PRICE FOOD ITEM NAME"
    DISPLAY newline
    DISPLAY '-'*12 + ' '*4 + '-'*15 + ' '*2 + '-'*14
    FOR EACH data IN foodItemDetails
        IF (chosenFoodCategoryName AS replace("FOOD CATEGORY", ""), strip(), capitalize()) IN data THEN
            DISPLAY data[1] data[3] data[2]
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION deleteFoodItemRecord(userConfirmation, foodItemId, foodDetailsList)
    DOWHILE (True)
        IF (userConfirmation=="Y") THEN 
            CALL progressBar("Deleting " + foodItemId)
            FOR EACH data IN foodDetailsList
                IF (foodItemId IN data[0]) THEN
                    index = index(data)
                    foodDetailsList = foodDetailsList AS pop(index)
                ENDIF
                IF ('\n' IN foodDetailsList[-1][-1]) THEN 
                    foodDetailsList[-1][-1] = foodDetailsList[-1][-1] AS strip("\n")
                ENDIF
            ENDFOR
            OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS f
                FOR EACH data IN foodDetailsList
                    WRITE data[0] INTO f
                ENDFOR
            CLOSE FILE FOOD_DETAILS_FILE
            DISPLAY " Success!"
            BREAK LOOP
        ELSE 
            CALL adminMenu()
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION displayRecordsMenu()
    validCategoryNumber = False
    foodCategoryList = CALL extractFoodCategoryTitles()
    DISPLAY newline
    DISPLAY "1. Food Categories"
    DISPLAY "2. Food Items by Category"
    DISPLAY "3. Customer Orders"
    DISPLAY "4. Customer Payment"
    DISPLAY newline
    DISPLAY "0. Back to Admin Menu"
    OPTIONS = [[1, displayFoodCategoryRecords], [3, displayOrderOrPaymentRecords], [4, displayOrderOrPaymentRecords]]
    DOWHILE (NOT validCategoryNumber)
        TRY
            userSelection = (CALL userInput("Display (Number)",True) AS INTEGER)
            validCategoryNumber = True
        EXCEPT ERROR THEN 
            DISPLAY "ERROR: Please enter a number"
            CALL time.sleep(0.1)
        ENDTRY
    ENDDO
    DOWHILE validCategoryNumber
        TRY
            IF (userSelection == 1) THEN
                CALL progressBar("Generating report")
                OPTIONS[0][1]()
                DISPLAY newline
                DISPLAY "Redirecting to admin menu in 15 seconds..."
                CALL time.sleep(15)
                CALL adminMenu()
            ELSE 
                IF (userSelection == 2) THEN
                    DISPLAY newline
                    DISPLAY "Select the food category that you want to be displayed"
                    DISPLAY newline
                    CALL displayFoodCategories()
                    chosenCategory = (CALL userInput("Category number",True) AS INTEGER)
                    CALL listOutFoodItems((foodCategoryList[chosenCategory-1][0]))
                    DISPLAY newline
                    DISPLAY "Redirecting to admin menu in 15 seconds..."
                    CALL time.sleep(15)
                    CALL adminMenu()
                ELSE 
                    IF (userSelection == 3) THEN
                        CALL progressBar("Generating report")
                        OPTIONS[1][1]('orders')
                        DISPLAY newline
                        DISPLAY "Redirecting to admin menu in 15 seconds..."
                        CALL time.sleep(15)
                        CALL adminMenu()
                    ELSE
                        IF (userSelection == 4) THEN
                            CALL progressBar("Generating report")
                            OPTIONS[2][1]('payments')
                            DISPLAY newline
                            DISPLAY "Redirecting to admin menu in 15 seconds..."
                            CALL time.sleep(15)
                            CALL adminMenu()
                        ELSE 
                            IF (userSelection == 0) THEN 
                                CALL adminMenu()
                            ELSE
                                RAISE ERROR
                            ENDIF
                        ENDIF
                    ENDIF
                ENDIF
            ENDIF
        EXCEPT ERROR THEN 
            DISPLAY "ERROR: Please enter a number"
            CALL time.sleep(0.1)
        EXCEPT ERROR THEN
            DISPLAY "ERROR: Number out of range"
            CALL time.sleep(0.1)
            CONTINUE LOOP
        ENDTRY
        BREAK LOOP
    ENDDO
ENDFUNCTION



FUNCTION displayFoodCategoryRecords()
    foodCategoryList = CALL extractFoodCategoryTitles()
    DISPLAY newline
    DISPLAY "\t\tDETAILS OF FOOD CATEGORIES"
    DISPLAY newline
    DISPLAY "\t\t" + "-"*26
    DISPLAY "CATEGORY NAME(S)\t\tCATEGORY DESCRIPTION(S)"
    DISPLAY newline 
    DISPLAY '-'*15 + "\t\t\t" + '-'*22
    FOR EACH data IN foodCategoryList
        DISPLAY data[0],data[1]
    ENDFOR
ENDFUNCTION


FUNCTION displayOrderOrPaymentRecords(displayChoice)
    orderRecordsList = CALL readOrderRecordsFile()
    DISPLAY newline
    DISPLAY "\t\t\t\tREPORT OF ALL CUSTOMER" + displayChoice AS upper()
    DISPLAY newline
    DISPLAY "\t\t\t\t" + '-'*31
    DISPLAY newline
    IF (displayChoice == 'orders') THEN 
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tORDER STATUS\tFOOD ID (QUANTITY)"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*12 + ' '*4 + '-'*18
        FOR EACH data IN orderRecordsList
            DISPLAY data[0],data[1],data[3],data[7],data[2]
        ENDFOR
    ELSE
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tPAYMENT METHOD\tPAYMENT STATUS\tPAID ON"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*14 + ' '*2 + '-'*14 + ' '*2 + '-'*7
        FOR EACH data IN orderRecordsList
            DISPLAY data[0],data[1],data[3],data[4],data[5],data[6]
        ENDFOR
    ENDIF
ENDFUNCTION

'''Search Menu Main Page'''
FUNCTION searchPageHeader(section)
    CALL clearConsole()
    CALL pageBanners(section, 50)
    DISPLAY newline
    DISPLAY "On what basis should the records be searched?" AS center(100)
    DISPLAY newline
    DISPLAY "1. Customer Username"
    DISPLAY "2. Order ID"
    DISPLAY newline
    DISPLAY "0. Back to Admin Menu"
    DISPLAY newline
ENDFUNCTION

FUNCTION searchRecordsMenu()
    orderRecordsList = CALL readOrderRecordsFile()
    DISPLAY newline
    DISPLAY "Which record do you want to check?"
    DISPLAY newline
    DISPLAY "1. Customer Order Record"
    DISPLAY "2. Customer Payment Record"
    DISPLAY newline
    DISPLAY "0. Back to Admin Menu"
    DISPLAY newline  
    validSearchCategory = False
    validSearchCriteria = False
    DOWHILE (NOT validSearchCategory)
        TRY
            searchCategory = (CALL userInput("Search(Number)",False)) AS INTEGER
            IF (searchCategory == 1) THEN
                CALL searchPageHeader("SEARCH CUSTOMER ORDER")
                validSearchCategory = True
            ELSE 
                IF (searchCategory == 2) THEN
                    CALL searchPageHeader("SEARCH CUSTOMER PAYMENT")
                    validSearchCategory = True
                ELSE
                    IF (searchCategory == 0) THEN
                        CALL adminMenu()
                    ELSE
                        DISPLAY newline
                        DISPLAY "ERROR: Number submitted is outside allowed range"
                        validSearchCategory = False
                    ENDIF
                ENDIF
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY newline
            DISPLAY "ERROR: Please enter a number"
        ENDTRY
    ENDDO
    DOWHILE (NOT validSearchCriteria)
        TRY
            searchCriteria = (CALL userInput("Search(Number)",False) AS INTEGER)
            IF (searchCategory == 1) THEN
                IF (searchCriteria == 1) THEN
                    CALL searchOrderByUsername(orderRecordsList)
                    validSearchCriteria = True
                ELSE
                    IF (searchCriteria == 2) THEN
                        CALL searchOrderById(orderRecordsList)
                        validSearchCriteria = True
                    ELSE 
                        IF (searchCriteria == 0) THEN
                            CALL adminMenu()
                        ELSE 
                            DISPLAY "ERROR: Number submitted is outside allowed range"
                        ENDIF
                    ENDIF
                ENDIF
            IF (searchCategory == 2) THEN
                IF (searchCriteria == 1) THEN
                    CALL searchPaymentByUsername(orderRecordsList)
                    validSearchCriteria = True
                ELSE
                    IF (searchCriteria == 2) THEN
                        CALL searchPaymentById(orderRecordsList)
                        validSearchCriteria = True
                    ELSE 
                        IF (searchCriteria == 0) THEN
                            CALL adminMenu()
                        ELSE 
                            DISPLAY newline
                            DISPLAY "ERROR: Number submitted is outside allowed range"
                        ENDIF
                    ENDIF
                ENDIF
        EXCEPT ERROR THEN
            DISPLAY newline
            DISPLAY "ERROR: Please enter a number"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION searchOrderByUsername(orderRecordsList)
        validUsername = False
        recordByUsername = []
        count = 0
        DOWHILE (NOT validUsername)
            username = CALL userInput("Please enter Customer Username",True)
            IF (username AS isdigit() OR username == "") THEN
                DISPLAY "ERROR: Invalid username"
            ELSE
                validUsername = True
            ENDIF
        ENDDO
        DOWHILE (validUsername)
            FOR EACH data IN orderRecordsList
                IF (username WITH CALL lower() == data[0]) THEN
                    APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordByUsername
                    count+=1
                ENDIF
            ENDFOR
            IF (count >=1) THEN
                DISPLAY count + " order records have been found for " + username
                CALL progressBar("Generating report")
                CALL time.sleep(0.5)
                CALL displaySearchResults('orders',username,recordByUsername)
            ELSE
                DISPLAY "No order records found for " + username
            ENDIF
            BREAK LOOP
ENDFUNCTION

FUNCTION searchOrderById(orderRecordsList)
    validOrderId = False
    recordById = []
    orderExists = False
    DOWHILE (NOT validOrderId)
        orderID = CALL userInput("Please enter Order ID",True)
        IF (orderID == "") THEN 
            DISPLAY "ERROR: Please submit an order ID"
        ELSE 
            IF (orderID[0] != 'O') THEN
                DISPLAY "ERROR: Order ID should start with an "'O'""
            ELSE
                IF NOT (orderID[0] AS isalpha() AND orderID[1:(orderID LENGTH)] AS isdigit()) THEN
                    DISPLAY ("ERROR: Invalid Order ID format")
                ELSE
                    validOrderId = True
                ENDIF
            ENDIF
        ENDIF
    ENDDO
    DOWHILE (validOrderId)
        FOR EACH data IN orderRecordsList
            IF (orderID AS upper() IN data) THEN
                APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordById
                orderExists = True
            ENDIF
        ENDFOR
        IF (orderExists) THEN
            DISPLAY "1 Order record have been found for Order ID " + orderID AS upper()
            CALL progressBar("Generating report")
            CALL time.sleep(0.5)
            CALL displaySearchResults('orders',orderID,recordById)
        ELSE
            DISPLAY "No order records found for " + orderID AS upper()
        ENDIF
        BREAK LOOP
    ENDDO
ENDFUNCTION

FUNCTION searchPaymentByUsername(paymentList)
        validUsername = False
        recordByUsername = []
        count = 0
        DOWHILE (NOT validUsername)
            username = CALL userInput("Please enter Customer Username",True)
            IF (username AS isdigit() OR username == "") THEN
                DISPLAY "ERROR: Invalid username"
            ELSE
                validUsername = True
            ENDIF
        ENDDO
        DOWHILE (validUsername)
            FOR EACH data IN paymentList
                IF (username WITH CALL lower() == data[0]) THEN
                    APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordByUsername
                    count+=1
                ENDIF
            ENDFOR
            IF (count >=1) THEN
                DISPLAY count + " paymente records have been found for " + username
                CALL progressBar("Generating report")
                CALL time.sleep(0.5)
                CALL displaySearchResults('payments',username,recordByUsername)
            ELSE
                DISPLAY "No payment records found for " + username
            ENDIF
            BREAK LOOP
ENDFUNCTION

FUNCTION searchPaymentById(paymentList)
    validOrderId = False
    recordById = []
    orderExists = False
    DOWHILE (NOT validOrderId)
        orderID = CALL userInput("Please enter Order ID",True)
        IF (orderID == "") THEN 
            DISPLAY "ERROR: Please submit an order ID"
        ELSE 
            IF (orderID[0] != 'O') THEN
                DISPLAY "ERROR: Order ID should start with an "'O'""
            ELSE
                IF NOT (orderID[0] AS isalpha() AND orderID[1:(orderID LENGTH)] AS isdigit()) THEN
                    DISPLAY ("ERROR: Invalid Order ID format")
                ELSE
                    validOrderId = True
                ENDIF
            ENDIF
        ENDIF
    ENDDO
    DOWHILE (validOrderId)
        FOR EACH data IN paymentList
            IF (orderID AS upper() IN data) THEN
                APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordById
                orderExists = True
            ENDIF
        ENDFOR
        IF (orderExists) THEN
            DISPLAY "1 payment record have been found for Order ID " + orderID AS upper()
            CALL progressBar("Generating report")
            CALL time.sleep(0.5)
            CALL displaySearchResults('payments',orderID,recordById)
        ELSE
            DISPLAY "No payment records found for " + orderID AS upper()
        ENDIF
        BREAK LOOP
    ENDDO
ENDFUNCTION

FUNCTION displaySearchResults(recordName,searchBasis,resultsList)
    IF (recordName == 'orders') THEN
        DISPLAY newline
        DISPLAY "\t\t\t\tORDER REPORT FOR " + searchBasis AS upper()
        DISPLAY newline 
        DISPLAY "\t\t\t\t" + '-'*(searchBasis LENGTH) + '-'*17
        DISPLAY newline
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tORDER STATUS\tFOOD ID(QUANTITY)"
        DISPLAY newline 
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*12 + ' '*4 + '-'*17
        FOR EACH data IN resultsList
            DISPLAY data[0] AS upper(),data[1],data[3],data[4],data[2]     
        ENDFOR
    ELSE
        DISPLAY newline
        DISPLAY "\t\t\t\tPAYMENT REPORT FOR " + searchBasis AS upper()
        DISPLAY newline 
        DISPLAY "\t\t\t\t" + '-'*19 + '-'*(searchBasis LENGTH)
        DISPLAY newline
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tPAYMENT METHOD\tPAYMENT STATUS\tPAID ON"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*14 + ' '*2 + '-'*14 + ' '*2 + '-'*7}
        FOR EACH data IN resultsList
            DISPLAY data[0] AS upper(),data[1],data[2],data[3],data[4],data[5]
        ENDFOR
    ENDIF
    DISPLAY newline
    DISPLAY "Redirecting to admin menu in 15 seconds..."
    CALL time.sleep(15)
    CALL adminMenu()
ENDFUNCTION

FUNCTION userHomepage()
    DOWHILE True
        CALL clearConsole()
        CALL pageBanners("GUEST DASHBOARD", 50)
        DISPLAY("\nPlease select any option below.")
        DISPLAY("1. View Menu", "2. Customer Login", "3. New Customer Registration", "\n0. Back to Main Menu", sep='\n')
        READ = CALL userInput("Choice", True).strip()
        IF READ == "1"
			CALL guestMenu()
        ELSE IF READ == "2"
            CALL customerMenu(customerLoginMenu())
        ELSE IF READ == "3"
            CALL pageBanners("NEW ACCOUNT", 50)
            CALL customerRegistrationMenu()
        ELSE IF READ == "0"
            BREAK LOOP
        ELSE
            READ("ERROR: Invalid selected number.")
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION guestMenu()
    DOWHILE True:
        CALL clearConsole()
		CALL pageBanners("MENU CATEGORIES", 50)
		DISPLAY("\n")
		CALL displayFoodCategories()
		DISPLAY("\n0. Back To Guest Menu")
        categoryTitle = CALL extractFoodCategoryTitles()
		TRY:
			DISPLAY("\nSelect the food category that you want to be displayed")
			chosenCategory = CALL int(userInput("Food category", True).strip())
            IF chosenCategory == 0
                BREAK LOOP
			ELSE IF chosenCategory <= len(categoryTitle)
				CALL guestPrintItem(categoryTitle[chosenCategory-1][0])
			ELSE
                READ("ERROR: Invalid chosen category.")
            ENDIF
        EXCEPT ValueError:
            READ("ERROR: Please enter numbers only.")
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION guestPrintItem(chosenFoodCategoryName)
    CALL clearConsole()
    DISPLAY(f"FOOD ITEMS IN {chosenFoodCategoryName.upper()}\n{'-'*24}{'-'*len(chosenFoodCategoryName)}")
    FOR data IN readFoodDetailsFile()
        IF (chosenFoodCategoryName.replace("FOOD CATEGORY", "").strip().capitalize()) IN data
            DISPLAY(data[2])
        ENDIF
    ENDFOR
    READ("\nPress Enter to Return")
ENDFUNCTION

FUNCTION customerLoginMenu()
    customerDetailsList = CALL customerReadDetailFile()
    DOWHILE True
        CALL clearConsole()
        CALL pageBanners("Login as Customer", 50)
        DISPLAY("Type \"0\" as username to cancel the login process.")
        uName = CALL userInput("Username", True).strip()
        CALL progressBar("Checking IF username exists")
        IF (authUsername(uName, customerDetailsList))
            DOWHILE True:
                CALL clearConsole()
                CALL pageBanners("Login as Customer", 50)
                DISPLAY("Username found, please enter password\n")
                DISPLAY("Type \"0\" as password to cancel the login process.")
                uPass = CALL userInput("Password", True).strip()
                IF (authPassword(uName, uPass, customerDetailsList))
                    CALL progressBar("Logging you in")
                    RETURN uName
                ELSE IF uPass == "0"
                    BREAK LOOP
                ELSE
                    READ("Incorrect password, please retry.")
                ENDIF
            ENDDO
        ELSE IF uName == "0"
            BREAK LOOP
        ELSE
            READ("Username NOT found, please retry.")
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION customerReadDetailFile()
    customerDetailsList = []
    OPEN CUSTOMER_DETAILS_FILE READ AS customerDetailsFile:
        CALL skipFileLine(6, customerDetailsFile)
        FOR EACH row IN customerDetailsFile
            REMOVE "\n" REPLACE " | " to " " SPLIT WITH " " IN rows THEN ADD TO customerDetailsList[]
        ENDFOR
    RETURN customerDetailsList
ENDFUNCTION

FUNCTION customerMenu(username: str)
    cart = []
    DOWHILE True
        CALL clearConsole()
        CALL pageBanners("Customer Menu", 50)
        DISPLAY("\nWelcome!, what would you like to do today?")
        DISPLAY("1. View Item By Categories", "2. View Orders", "\n0. Logout", sep='\n')
        input = CALL userInput("Choice", True).strip()
        IF input == "1"
            cart = CALL customerMenuCategory(cart, username)
        ELSE IF input == "2"
            CALL customerOrderMenu(username)
        ELSE IF input == "0"
            BREAK LOOP
        ELSE
            READ("\nERROR: Please enter a valid selection number.")
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION customerMenuCategory(cart: list, username:str)
    foodCat = CALL extractFoodCategoryTitles()
    foodCatLen = CALL len(foodCat)
    DOWHILE True
        TRY
            CALL clearConsole()
            CALL pageBanners("Food Menu", 50)
            DISPLAY("\nWhat category of beverage would you like to know more?\n")
            CALL customerPrintCategoryDetail()
            IF len(cart) > 0
                CALL customerCartPrint(cart)
            ENDIF
            DISPLAY("\nC. View Cart\n0. Back to Customer Menu")
            chosenCategory = CALL userInput("Food category", True).strip()
            IF chosenCategory == "0"
                RETURN cart
            ELSE IF chosenCategory.upper() == "C"
                CALL customerCartMenu(cart, username)
                cart = []
            ELSE IF int(chosenCategory) <= foodCatLen
                cart = CALL customerItemMenu(cart, (extractFoodCategoryTitles()[int(chosenCategory)-1][0]))
            ELSE
                READ("\nERROR: Number out of range.")
            ENDIF
        EXCEPT ValueError
            READ("\nERROR: Please enter a valid selection number.")
    ENDDO
ENDFUNCTION

FUNCTION customerPrintCategoryDetail()
    foodCat = CALL extractFoodCategoryTitles()
    FOR i IN range(len(foodCat)):
        DISPLAY("{}. {} - {}".format(i+1, foodCat[i][0], foodCat[i][1]))
    ENDFOR
ENDFUNCTION

FUNCTION customerCartMenu(cart: list, username: str)
	DOWHILE True
        CALL clearConsole()
		CALL pageBanners("  Cart  ", 50)
        cartDetailArray, cartTtl = CALL customerCartDetail(cart)
        DISPLAY("\n{:<3}{:<2}{:<32}{:<2}{:<9}{:<2}{:<11}{:<2}{:<17}{:<2}".format("N", "|", "Item Name", "|", "Quantity", "|", "Unit Price", "|", "Total Unit Price", "|"))
		DISPLAY("{:<3}{:<2}{:<32}{:<2}{:<9}{:<2}{:<11}{:<2}{:<17}{:<2}".format("", "|", "", "|", "", "|", "", "|", "", "|"))
        FOR i IN range(len(cartDetailArray))
            DISPLAY("{:<3}{:<2}{:<32}{:<2}{:<9}{:<2}{:<11}{:<2}{:<17}{:<2}".format((str(i+1)+"."), "|",
                  cartDetailArray[i][0], "|", cartDetailArray[i][1], "|", cartDetailArray[i][2], "|", cartDetailArray[i][3], "|"))
        ENDFOR
        DISPLAY(f"\nTotal: {cartTtl}\n\n1. Submit Order Cart\n0. Back")
        option = CALL userInput("Choice", True).strip()
        IF option == "0"
            RETURN cart
        ELSE IF option == "1"
            CALL customerCartSubmit(cart, username, cartTtl)
            RETURN []
        ELSE
            READ("ERROR: Something went wrong, invalid READ.")
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION customerCartDetail(cart: list)
	itemsArray = CALL readFoodDetailsFile()
	cartDetail = []
    cartTotal = 0
    FOR cartItem IN range(0, len(cart), 2)
        FOR item IN range(len(itemsArray))
            IF cart[cartItem] == itemsArray[item][1]
                unitTotal =  CALL float(itemsArray[item][3])*float(cart[cartItem+1])
                cartTotal += unitTotal
                detail = [(itemsArray[item][2]), CALL str(cart[cartItem+1]), itemsArray[item][3], CALL str(unitTotal)]
				CALL cartDetail.append(detail)
            ENDIF
        ENDFOR
    ENDFOR
    cartTotal = "{:.2f}".format(cartTotal)
    RETURN (cartDetail, cartTotal)
ENDFUNCTION

FUNCTION customerCartSubmit(cart: list, username: str, cartTtl: float)
        IF len(cart) == 0
            READ("ERROR: Your order cart is empty.")
            RETURN
        ENDIF
        itemString = ""
        FOR i IN range(0, len(cart), 2)
            itemString += cart[i] + "(" + CALL str(cart[i + 1]) + ")"
            IF i < (len(cart)-2)
                itemString += ","
            ENDIF
        ENDFOR
        record = username + " | " + CALL str(customerOrderDetailFileLen()+1) + " | " + itemString + " | " + CALL str(cartTtl) + " | " + "PAID\n"
        OPEN "./orderRecords.txt" IN AppendMode AS orderFile 
            CALL orderFile.write(record)
        CLOSE orderFile
        READ("Order placed successfully, please press enter to RETURN.")
ENDFUNCTION

FUNCTION customerOrderDetailFileLen()
    len = 0
    OPEN "./orderRecords.txt" IN ReadMode AS orderDetailFile
        CALL skipFileLine(6, orderDetailFile)
        FOR row IN orderDetailFile
            len += 1
        ENDFOR
    CLOSE orderDetailFile
    RETURN len
ENDFUNCTION

FUNCTION customerItemMenu(cart: list, chosenFoodCategoryName: str)
    cartChosen, addCartChosen = False, False
    DOWHILE True:
        CALL clearConsole()
        CALL customerItemPrint(chosenFoodCategoryName)
        TRY
            cart = CALL customerCartTidy(cart)
            IF len(cart) > 0
                CALL customerCartPrint(cart)
            ENDIF
        EXCEPT TypeError
            DISPLAY NOTHING TO PREVENT PROGRAM CRASH
        ENDTRY
        IF cartChosen
            IF addCartChosen
                itemToAdd = CALL userInput("Item Code to Add (M2)", True).strip().upper()
                IF customerCartValidItem(itemToAdd)
                    amountToAdd = CALL str(userInput("Amount", True).strip())
                    cart = CALL customerCartAddItem(itemToAdd, amountToAdd, cart)
                ELSE
                    READ("\nERROR: Invalid amount READ.")
                ENDIF
                cartChosen, addCartChosen = False, False
            ELSE
                itemToRemove = CALL userInput("Item code to remove", True).strip().upper()
                IF customerCartValidItem(itemToRemove)
                    amountToRemove = CALL 	userInput("Amount to Remove (\"All\" to remove item from cart)", True).strip()
                    cart = CALL customerCartRemoveItem(itemToRemove, amountToRemove, cart)
                ELSE
                    READ("ERROR: Invalid amount READ.")
                ENDIF
                cartChosen = False
            ENDIF
        ELSE
            DISPLAY("\n1. Add Item to Cart.\n2. Remove Item from Cart.\n\n0. Back")
            uInput = CALL userInput("Choice", True).strip().upper()
            IF uInput == "0"
                RETURN cart
            ELSE IF uInput == "1":
                cartChosen, addCartChosen = True, True
            ELSE IF uInput == "2":
                cartChosen = True
            ELSE
                READ("ERROR: Invalid selection entered.")
            ENDIF
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION customerItemPrint(chosenFoodCategoryName: str)
    DISPLAY(f"{chosenFoodCategoryName.upper()}".center(50))
    DISPLAY(f"{'-'*24}{'-'*len(chosenFoodCategoryName)}")
    DISPLAY(f"FOOD ITEM ID\tFOOD ITEM PRICE\t FOOD ITEM NAME\n{'-'*12}{' '*4}{'-'*15}{' '*2}{'-'*14}")
    FOR data IN readFoodDetailsFile():
        IF (chosenFoodCategoryName.replace("FOOD CATEGORY", "").strip().capitalize()) IN data
            DISPLAY('{:<16}{:<15}\t {}'.format(data[1], data[3], data[2]))
    ENDFOR
ENDFUNCTION

FUNCTION customerCartTidy(cart: list)
	tempCart = []
    FOR i IN range(0, len(cart), 2)
        IF cart[i+1] != 0
            tempCart.extend([cart[i], cart[i+1]])
        ENDIF
    ENDFOR
    RETURN tempCart
ENDFUNCTION

FUNCTION customerCartPrint(cart: list)
    stringToPrint = ""
    FOR i IN range(0, len(cart), 2)
        stringToPrint = stringToPrint + cart[i] + "(" + CALL str(cart[i+1]) + ")"
        IF i < (len(cart)-2):
            stringToPrint = stringToPrint + ", "
        ENDIF
    ENDFOR
    DISPLAY(f"\nCart :  {stringToPrint}")
ENDFUNCTION

FUNCTION customerCartValidItem(code: str)
    itemsArray = CALL readFoodDetailsFile()
    FOR item IN range(len(itemsArray))
        IF itemsArray[item][1] == code
            RETURN True
        ENDIF
    ENDFOR
    RETURN False
ENDFUNCTION

FUNCTION customerCartAddItem(item: str, amount: str, cart: list)
    TRY
        intAmount = CALL int(amount)
        FOR i IN range(0, len(cart), 2)
            IF cart[i] == item
                cart[i+1] += intAmount
                RETURN cart
            ENDIF
        ENDFOR
        CALL cart.extend([item, intAmount])
        RETURN cart
    EXCEPT
        READ("\nERROR: Alphabet/s found IN amount entered, please enter numbers only.")
        RETURN cart
    ENDTRY
ENDFUNCTION 		

FUNCTION customerCartRemoveItem(item: str, amount: str, cart: list)
    IF amount.upper() != "ALL"
        TRY
			intAmount = CALL int(amount)
        EXCEPT
            READ("ERROR: Invalid string found, do you mean \"All\"?")
            RETURN cart
        ENDTRY
    ENDIF
    FOR i IN range(0, len(cart), 2)
        IF cart[i] == item
            amountFromCart = cart[i+1]
            IF amount.lower() == "all"
                cart[i+1] = 0
            ELSE IF intAmount <= amountFromCart
                cart[i+1] -= intAmount
            ELSE IF intAmount > amountFromCart
                READ ("ERROR: Item code entered not found, please try again.")
                RETURN cart
            ENDIF
        ENDIF
            RETURN cart
    ENDFOR
    READ("ERROR: Item code entered NOT found, please try again.")
    RETURN cart
ENDFUNCTION

FUNCTION customerOrderMenu(username: str)
    CALL clearConsole()
    CALL pageBanners("  Orders  ", 50)
    DISPLAY("")
    CALL customerOrderPrint(username)
    READ("\nPress enter to RETURN.")
ENDFUNCTION

FUNCTION customerOrderPrint(username: str)
        orderDetailArray = CALL customerOrderDetailRead(username)
        DISPLAY("{:<9}{:<2}{:<32}{:<2}{:<8}{:<2}{:<7}{:<2}".format("Order ID", "|", "Items", "|", "Total", "|", "Status", "|"))
        DISPLAY("{:<9}{:<2}{:<32}{:<2}{:<8}{:<2}{:<7}{:<2}".format("", "|", "", "|", "", "|", "", "|"))
        FOR i IN range(len(orderDetailArray))
            DISPLAY("{:<9}{:<2}{:<32}{:<2}{:<8}{:<2}{:<7}{:<2}".format(orderDetailArray[i][1], "|", orderDetailArray[i][2], "|", orderDetailArray[i][3], "|", orderDetailArray[i][4], "|"))
        ENDFOR
ENDFUNCTION

FUNCTION customerOrderDetailRead(username: str)
    orderArray = []
    READ ""./orderRecords.txt" IN ReadMode AS orderDetailFile
        CALL skipFileLine(6, orderDetailFile)
        FOR row IN orderDetailFile
            order = REMOVE "\n" REPLACE " | " TO " " SPLIT WITH " " IN ROW 
            IF order[0] == username
                CALL orderArray.append(order)
    RETURN orderArray
ENDFUNCTION

FUNCTION customerRegistrationMenu()
    titleList = ["Username", "Password", "First Name", "Last Name", "House Number", "Street", "State", "Postcode", "Phone Number"]
    userData = ["", "", "", "", "", "", "", "", ""]
    DOWHILE True
        FOR a IN range(len(titleList))
            CALL clearConsole()
            CALL pageBanners("Registration", 50)
            DISPLAY("")
            FOR b IN range(9)
                DISPLAY("{:<15}{:<2}{:<2}".format(titleList[b], ":", userData[b]))
            ENDFOR
            DISPLAY("\n0. Type \"0\" to cancel registration.")
            data = CALL userInput(titleList[a], True).strip()
            IF data == "0"
                RETURN
            ENDIF
            userData[a] = data
        ENDFOR
        success = CALL customerRegistrationSubmit(userData)
        IF success
            READ("\nUser account regsitered successfully, please enter to RETURN.")
            BREAK LOOP
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION customerRegistrationSubmit(userData:list)
    FOR data IN userData
        IF data.strip() == ""
            READ("ERROR: An empty data found, please try again.")
            RETURN False
        ENDIF
        record = userData[0] + " | " + userData[1] + " | " + userData[2] + " | " + userData[3] + " | " + userData[4] + " | " + userData[5] + " | " + userData[6] + " | " + userData[7] + " | " + userData[8] + "\n"
    ENDFOR
    OPEN CUSTOMER_DETAILS_FILE AS custFile
		CALL custFile.write(record)
    RETURN True
ENDFUNCTION	

FUNCTION main()
    DOWHILE True
        CALL clearConsole()
        DISPLAY(" ____   ___  _____ ____".center(78))
        DISPLAY("/ ___| / _ \|  ___/ ___|".center(78))
        DISPLAY("\___ \| | | | |_  \___ \\".center(78))
        DISPLAY(" ___) | |_| |  _|  ___) |".center(80))
        DISPLAY("|____/ \___/|_|   |____/".center(78))
        DISPLAY("")
        DISPLAY(f' {"Welcome to the Online Food Ordering Management System"} '.center(85, '='))
        DISPLAY("\nWho are you logging in as?\n", "1. Admin", "2. Customer", "3. Quit Program", sep=' \n')
        TRY
            uInput = CALL int(userInput("Login as (Number)",True).strip())
            IF uInput == 1 
                CALL clearConsole()
                CALL pageBanners("ADMIN LOGIN PAGE", 50)
                CALL adminLoginPage()
            ELSE IF uInput == 2
				CALL userHomepage()
            ELSE IF uInput == 3
                CALL quit()
            ELSE 
                READ("ERROR: Number out of choice range")
            ENDIF
        EXCEPT ValueError
            READ("ERROR: Foreign character submitted")
        ENDTRY
    ENDDO
ENDFUNCTION

IF __name__ == '__main__'
    TRY	
        CALL initialProgramCheck()
        CALL progressBar("\nLoading program")
        CALL time.sleep(0.1)
        CALL main()
    EXCEPT KeyboardInterrupt:
        CALL quit()
    ENDTRY 
ENDIF