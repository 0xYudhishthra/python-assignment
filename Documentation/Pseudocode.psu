
FUNCTION clearConsole()
    IF (CALL os.name IN ("nt", "dos")) THEN  
        CALL os.system("cls")
    ELSE
        CALL os.system("clear")
    ENDIF
ENDFUNCTION
    
FUNCTION quit() 
    DISPLAY newline
    DISPLAY "Thank you! Please come again"   
    CALL time.sleep(1)
    CALL exit()
ENDFUNCTION
	
FUNCTION userInput(promptMessage, skipLine) 
    IF (skipLine) THEN
        DISPLAY newline
        DISPLAY promptMessage + " >> "
        READ input
        RETURN input 
    ELSE
        DISPLAY promptMessage + " >> "
        READ input
        RETURN input 
    ENDIF
ENDFUNCTION

FUNCTION authUsername(username,detailsList)
    FOR EACH data IN detailsList
        IF (username == data[0]) THEN
            RETURN True
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION authPassword(username, password, detailsList) 
    FOR EACH data IN detailsList
        IF ((username == data[0]) AND (password == data[1])) THEN
            RETURN True
        ENDIF
    ENDFOR
ENDFUNCTION

FUNCTION skipFileLine(count, fileHandle) 
    LOOP i FROM 0 TO (count-1) STEP 1
        CALL next(fileHandle) 
        NEXT i 
    ENDLOOP
ENDFUNCTION

FUNCTION removeEmptyList(sourceList)
    updatedList = []
    FOR EACH data IN sourceList
        DOWHILE ('' IN data)
            REMOVE ('') FROM data
        ENDDO
        IF data != [] THEN
            APPEND data TO updatedList
        ENDIF
    ENDFOR
    RETURN updatedList
ENDFUNCTION

FUNCTION progressBar(loadingMessage)
    DISPLAY loadingMessage + "..."
    animation = ["[■□□□□□□□□□]","[■■□□□□□□□□]", "[■■■□□□□□□□]", "[■■■■□□□□□□]", "[■■■■■□□□□□]", 
                  "[■■■■■■□□□□]", "[■■■■■■■□□□]", "[■■■■■■■■□□]", "[■■■■■■■■■□]", "[■■■■■■■■■■]"]
    FOR EACH item IN animation
        CALL time.sleep(0.05)
        DISPLAY "\r" + item WITH end = "" 
    ENDFOR
ENDFUNCTION

FUNCTION pageBanners(pageTitle, centerLength)
    DISPLAY "_" * (pageTitle LENGTH)
    DISPLAY newline
    DISPLAY pageTitle
    DISPLAY "_" * (pageTitle LENGTH)
ENDFUNCTION

FUNCTION readAdminDetailsFile()  
    adminDetailsList = [] 
    TRY
        OPEN FILE ADMIN_DETAILS_FILE IN READ MODE AS adminDetailsFile
            CALL skipFileLine(6,adminDetailsFile)
            FOR EACH row IN adminDetailsFile
                STRIP row BY "\n"
                REPLACE row FROM " | " TO " "
                SPLIT row BY " "
                APPEND row to adminDetailsList
            ENDFOR
        CLOSE FILE ADMIN_DETAILS_FILE   
        IF (adminDetailsList == []) THEN
            RAISE ERROR
        ENDIF
    EXCEPT ERROR THEN
        DISPLAY newline
        DISPLAY "Admin details file is missing!"
        CALL exit()
    EXCEPT ERROR THEN
        DISPLAY newline
        DISPLAY "No data in admin details file!"
        CALL exit()
    ENDTRY
    RETURN adminDetailsList
ENDFUNCTION

FUNCTION readFoodDetailsFile()
    foodDetailsList=[]
        TRY
            OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS foodDetailsFile
                CALL skipFileLine(6,foodDetailsFile) 
                FOR EACH row IN foodDetailsFile
                    IF (row[0] == "_") THEN
                        CALL skipFileLine(3,foodDetailsFile)
                    ENDIF
                    REPLACE row FROM "\n" TO ""
                    REPLACE row FROM "_" TO ""
                    SPLIT row BY " | "
                    APPEND row to foodDetailsList
                ENDFOR
            CLOSE FILE FOOD_DETAILS_FILE
            IF (foodDetailsList == []) THEN
                RAISE ERROR
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "Food details file is missing!"
            CALL exit()
        EXCEPT ERROR THEN
            DISPLAY newline
            DISPLAY "No data in food details file!"
            CALL exit()
        ENDTRY
    foodDetailsList = CALL removeEmptyList(foodDetailsList)
    RETURN foodDetailsList
ENDFUNCTION

FUNCTION readOrderRecordsFile()
    orderDetailsList = []
    TRY
        OPEN FILE ORDER_RECORDS_FILE IN READ MODE AS orderRecordsFile
            CALL skipFileLine(6,orderRecordsFile)
            FOR EACH row IN orderRecordsFile
                STRIP row BY '\n'
                SPLIT row BY " | "
                APPEND row TO orderDetailsList
            ENDFOR
        CLOSE FILE ORDER_RECORDS_FILE
        RETURN orderDetailsList
    EXCEPT ERROR THEN
        DISPLAY "Order records file is missing!"
    ENDTRY
ENDFUNCTION

FUNCTION readCustomerDetailsFile()
    customerDetailsList = [] 
    TRY
        OPEN CUSTOMER_DETAILS_FILE IN READ MODE AS customerDetailsFile
            CALL skipFileLine(6,customerDetailsFile)
            FOR EACH row IN customerDetailsFile
                STRIP row BY "\n"
                REPLACE row FROM " | " TO " "
                SPLIT row BY " "
                APPEND row TO customerDetailsList
            ENDFOR
        CLOSE FILE CUSTOMER_DETAILS_FILE
        RETURN customerDetailsList  
    EXCEPT ERROR THEN
        DISPLAY "Customers database is missing!" 
    ENDTRY
ENDFUNCTION      

FUNCTION adminLoginPage()
    adminDetailsList = CALL readAdminDetailsFile()
    usernameExists = False
    DOWHILE (NOT usernameExists) 
        uName = CALL userInput("Username",True) AS lower()
        IF (uName == "") THEN 
            CONTINUE LOOP
        ENDIF
        CALL progressBar("Authenticating username")
        CALL time.sleep(0.05)
        usernameExists = CALL authUsername(uName,adminDetailsList)
        IF (usernameExists) THEN
            DISPLAY " Username found, please enter password "
            DISPLAY newline
        ELSE
            DISPLAY " ERROR: Username not found, please retry"
            DISPLAY newline
        ENDIF
    ENDDO
    DOWHILE (usernameExists)
        uPass = CALL userInput("Password",True)
        IF (uPass == "") THEN
            CONTINUE LOOP
        ENDIF
        CALL progressBar("Authenticating password")
        CALL time.sleep(0.05)
        passwordMatch = CALL authPassword(uName, uPass,adminDetailsList)
        IF (passwordMatch) THEN
            CALL adminMenu(uName)
            BREAK LOOP  
        ELSE 
            DISPLAY " ERROR: Incorrect password , please retry")
        ENDIF
    ENDDO
ENDFUNCTION

FUNCTION adminMenu(uName="admin")
    CHOICES = [[1, "ADD NEW FOOD ITEM", addFoodItemMenu], [2, "MODIFY FOOD ITEM", modifyFoodItemMenu], 
                [3, "DISPLAY RECORDS", displayRecordsMenu], [4, "SEARCH RECORDS", searchRecordsMenu]]
    CALL clearConsole()
    CALL pageBanners("ADMIN DASHBOARD",50)
    DISPLAY newline
    DISPLAY "Hey, " + uName AS capitalize() + "! What would you like to do today?"
    DISPLAY newline
    DISPLAY "1. Add food item"
    DISPLAY "2. Modify food item"
    DISPLAY "3. Display records"
    DISPLAY "4. Search record"
    DISPLAY "0. Log out"
    DOWHILE (True)
        TRY
            userSelection = (CALL userInput("I would like to",True)) AS INTEGER
            IF (userSelection == 0) THEN
                CALL progressBar("Logging out")
                CALL main()
            ENDIF
            IF (userSelection > choices LENGTH) THEN
                print("Number is out of range!")
                CALL time.sleep(1)
                CONTINUE LOOP
            ENDIF
            FOR EACH choice IN CHOICES
                IF (userSelection == choice[0]) THEN
                    CALL clearConsole()
                    CALL pageBanners(choice[1],50)
                    CALL choice[2]()
                ENDIF
            ENDFOR
            BREAK LOOP 
        EXCEPT ERROR THEN
            DISPLAY "Please submit a number"
            CALL time.sleep(1) 
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION addFoodItemMenu()
    DOWHILE (True)
        TRY
            foodCategoryTitles = CALL extractFoodCategories()
            DISPLAY newline
            DISPLAY "In which category would you like to add the food item?"
            DISPLAY newline * 2
            DISPLAY "0. Add new food category"
            CALL displayFoodCategories()
            chosenFoodCategoryNumber = (CALL userInput("Food Category Number",True)) AS INTEGER
            IF (chosenFoodCategoryNumber == 0) THEN
                newFoodCategoryName = CALL userInput("Category Name",False)
                newFoodCategoryDescription = CALL userInput("Description",False)
                CALL writeNewFoodCategoryToFile(newFoodCategoryName,newFoodCategoryDescription)
                DISPLAY "Would you like to add a new food item in this category?"
                userConfirmation = (CALL userInput("(Y)es/(N)o",False)) WITH CALL upper()
                IF (userConfirmation == 'Y') THEN
                    foodItemName,foodItemPrice = CALL getNewFoodItemDetails(newFoodCategoryName)
                    CALL writeNewFoodItemToFile(newFoodCategoryName, foodItemName, foodItemPrice)
                ELSE
                    CALL addFoodItemMenu()
                ENDIF
            ELSE 
                IF ((chosenFoodCategoryNumber > 0) AND (chosenFoodCategoryNumber <= (foodCategoryTitles LENGTH))) THEN
                    chosenFoodCategoryName = foodCategoryTitles[(chosenFoodCategoryNumber AS INTEGER)-1][0] WITH CALL replace ("FOOD CATEGORY", ""), strip(), capitalize()
                    foodItemName,foodItemPrice = CALL getNewFoodItemDetails(chosenFoodCategoryName)
                    DISPLAY newline
                    DISPLAY "Please confirm the new food details you would like to add"
                    userConfirmation = CALL userInput("(Y)es/(N)o",False) WITH CALL upper()
                        IF (userConfirmation == 'Y') THEN
                            CALL writeNewFoodItemToFile(chosenFoodCategoryName,foodItemName,foodItemPrice)
                        ELSE 
                            IF (userConfirmation == 'N') THEN
                                CALL addFoodItemMenu()
                            ELSE
                                DISPLAY("Please enter either Y or N")
                                CONTINUE
                            ENDIF
                        ENDIF
                ELSE
                    DISPLAY "Invalid food category number"
                    CALL time.sleep(1)
                    CONTINUE
                ENDIF
            ENDIF
            BREAK
        EXCEPT ERROR THEN
            DISPLAY "Please submit a number!"
            CALL time.sleep(1)
        EXCEPT ERROR THEN 
            DISPLAY "Food details file is corrupted!"
            BREAK
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION getNewFoodItemDetails(chosenFoodCategoryName):
    TRY
        foodItemName = CALL userInput("New Food Item Name",False)
        foodItemPrice = (CALL userInput("New Food Item Price",False)) AS FLOAT formatted to 2 decimal places
        DISPLAY "FOOD CATEGORY  FOOD ITEM PRICE FOOD ITEM NAME"
        DISPLAY chosenFoodCategoryName,foodItemPrice,foodItemName
        RETURN foodItemName,foodItemPrice
    EXCEPT ERROR THEN
        DISPLAY "Invalid value entered"
    ENDTRY
ENDFUNCTION

FUNCTION writeNewFoodCategoryToFile(categoryName,categoryDescription)
    uppercaseName = categoryName AS upper()
    capitalizedDescription = categoryDescription AS capitalize()
    OPEN FILE FOOD_DETAILS_FILE IN APPEND MODE as foodDetailsFile
        WRITE newline INTO foodDetailsFile
        WRITE '_' * 88 INTO foodDetailsFile
        WRITE newline * 2 INTO foodDetailsFile
        WRITE uppercaseName + "FOOD CATEGORY - " + capitalizedDescription INTO foodDetailsFile
        WRITE newline INTO foodDetailsFile
        WRITE '_' * 88 INTO foodDetailsFile
    CLOSE FILE FOOD_DETAILS_FILE
ENDFUNCTION

FUNCTION writeNewFoodItemToFile(foodCategoryName,foodItemName,foodItemPrice)
    TRY
        orderRecordsList = []
        foodItemIndexes = []
        OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS f 
            FOR EACH row IN f:   
                APPEND [row] to orderRecordsList
            ENDFOR
        CLOSE FILE FOOD_DETAILS_FILE
        FOR data IN orderRecordsList
            IF (foodCategoryName IN data[0]) THEN
                APPEND orderRecordsList WITH CALL index(data) TO foodItemIndexes
            ENDIF
        ENDFOR
        IF (NOT foodItemIndexes) THEN
            newFoodID = foodCategoryName[0] + '1'
            lastFoodItemIndex = (orderRecordsList LENGTH)-1
        ELSE 
            lastFoodItemIndex = foodItemIndexes[-1]
            lastFoodItemRecord = orderRecordsFile[lastFoodItemIndex][0] WITH CALL split(" | ")
            newFoodID = lastFoodItemRecord[0][0] + (((lastFoodItemRecord[1] WITH CALL strip(lastFoodItemRecord[0][0]) AS INTEGER)+1) AS STRING)
        ENDIF
        IF (lastFoodItemIndex == ((orderRecordsFile LENGTH)-1)) THEN
            INSERT [newline + foodCategoryName + '|' + newFoodID + '|' + foodItemName + '|' + foodItemPrice AS STRING] INTO orderRecordsList AT lastFoodItemIndex+1
        ELSE
            INSERT [foodCategoryName + '|' + newFoodID + '|' + foodItemName + '|' + foodItemPrice AS STRING] INTO orderRecordsList AT lastFoodItemIndex+1
        ENDIF
        OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS foodDetailsFile
            FOR EACH data IN orderRecordsList:       
                WRITE data[0] INTO foodDetailsFile
            ENDFOR
        CLOSE FILE FOOD_DETAILS_FILE
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is corrupted!"
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is missing!"
    ENDTRY
ENDFUNCTION

FUNCTION displayFoodCategories()
    TRY  
        foodCategoriesList = CALL extractFoodCategories()
        FOR EACH list IN foodCategoriesList
            DISPLAY count AS STRING + ". " + list[0] AS capitalize() 
        ENDFOR
    EXCEPT ERROR THEN 
        DISPLAY "Food details file is corrupted!"
    ENDTRY
ENDFUNCTION

FUNCTION extractFoodCategories()
    TRY
        rawList = []
        foodCategoryDetails = []
        OPEN FILE FOOD_DETAILS_FILE IN READ MODE as foodDetailsFile
            CALL skipFileLine(4,foodDetailsFile)
            FOR EACH line IN foodDetailsFile
                STRIP line
                REPLACE line FROM '_' TO ''
                SPLIT line BY ","
                APPEND line to rawList
            ENDFOR
        CLOSE FILE FOOD_DETAILS_FILE
        FOR EACH data IN CALL removeEmptyList(rawList)
            IF (" | " IN data[0]) THEN 
                index = rawList WITH CALL index(data)
                rawList = rawList WITH CALL pop(index)
            ENDIF
        ENDFOR
        FOR EACH list IN CALL removeEmptyList(rawList)
            FOR EACH data IN list
                LOOP i FROM 0 TO ((data LENGTH)-1) STEP 1
                    IF (data[i] == "-") THEN 
                        categoryTitle = '' WITH CALL join(data[0:i-1])
                        categoryDescription = '' WITH CALL join(data[i+2:-1])
                        APPEND categoryTitle, categoryDescription TO foodCategoryDetails
                    ENDIF
                    NEXT i
                ENDLOOP
            ENDFOR
        ENDFOR
        RETURN foodCategoryDetails         
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is corrupted!"
    EXCEPT ERROR THEN
        DISPLAY "Food details text file is missing!"
    ENDTRY
ENDFUNCTION

FUNCTION modifyFoodItemMenu()
    foodDetailsList = []
    OPEN FILE FOOD_DETAILS_FILE IN READ MODE AS foodDetailsFile
        FOR EACH row IN foodDetailsFile
            APPEND [row] TO foodDetailsList
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
    DISPLAY newline
    DISPLAY (" " * 5) + "1. UPDATE RECORD   " + "2. DELETE RECORD"
    DISPLAY newline
    DISPLAY "What would you like to do?"
    DOWHILE (True)
        TRY
            modifyChoice = (CALL userInput("Input 1 or 2",False)) AS INTEGER
            IF (modifyChoice == 1) THEN
                CALL clearConsole()
                CALL pageBanners("UPDATE FOOD ITEM",50)
                CALL updateFoodItemMenu(foodDetailsList)
            ELSE 
                IF (modifyChoice == 2) THEN
                    CALL clearConsole()
                    CALL pageBanners("DELETE FOOD ITEM",50)
                    CALL deleteFoodItemMenu(foodDetailsList)
                ELSE
                    DISPLAY "Number is out of range"
                    CONTINUE
                BREAK
                ENDIF
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "Please submit a number"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION updateFoodItemRecord(foodDetailsList, foodItemIdList, foodItemIdIndex)
    TRY
        DISPLAY newline
        DISPLAY "What would you like to update?"
        DISPLAY "1. Food Item Price"
        DISPLAY "2. Food Item Name"
        DISPLAY "3. Both"
        DOWHILE (True)
            updateCriteria = (CALL userInput("Update choice",True)) AS INTEGER
            IF (updateCriteria == 1) THEN
                newPrice = (CALL userInput("New food item price",False)) AS FLOAT
                newPrice = CALL format(newPrice,'.2f')
                IF ('\n' IN foodItemIdList[3]) THEN
                    foodItemIdList[3] = newPrice + '\n'
                ELSE
                    foodItemIdList[3] = newPrice
                ENDIF    
            ELSE 
                IF (updateCriteria == 2) THEN 
                    foodItemIdList[2] = CALL userInput("New food item name",False)
                ELSE 
                    IF (updateCriteria == 3) THEN
                        newPrice = CALL userInput("New food item price",False)
                        foodItemIdList[2] = CALL userInput("New food item name",False)
                        IF ('\n' IN foodItemIdList[3]) THEN
                            foodItemIdList[3] = newPrice + '\n'
                        ELSE
                            foodItemIdList[3] = newPrice
                        ENDIF  
                    ELSE
                        DISPLAY("Number out of range")
                        CONTINUE
                    BREAK
                    ENDIF
                ENDIF
            ENDIF
        ENDDO
    EXCEPT ERROR THEN
        DISPLAY "Food details file not found"
    EXCEPT ERROR THEN 
        DISPLAY "Please submit a number"
    ENDTRY
    foodDetailsList[foodItemIdIndex] = [" | " WITH CALL join(foodItemIdList)]
    OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS f
        FOR EACH data IN foodDetailsList
            WRITE data[0] INTO f
        ENDFOR
    CLOSE FILE FOOD_DETAILS_FILE
ENDFUNCTION

FUNCTION verifyFoodItemId(foodItemId,foodDetailsList)
    IF (foodItemId == '') THEN
        RETURN False
    ELSE 
        IF ((foodItemId[0] AS isalpha()) AND (foodItemId[1 : (foodItemId LENGTH)] AS isdigit())) THEN
            FOR EACH data IN foodDetailsList
                IF foodItemId IN data[0] THEN
                    RETURN True
                ENDIF
            ENDFOR
        ELSE 
            RETURN False
        ENDIF
    ENDIF
ENDFUNCTION

FUNCTION listOutFoodItems(chosenFoodCategoryName)
    DOWHILE (True)
        CALL rogressBar("Retrieving food item records")
        CALL time.sleep(0.5)
        DISPLAY newline * 2
        DISPLAY "REPORT OF FOOD ITEMS IN " + (chosenFoodCategoryName WITH CALL upper())
        DISPLAY newline
        DISPLAY '-' * 24 + '-' * (chosenFoodCategoryName LENGTH)
        DISPLAY "FOOD ITEM ID   FOOD ITEM PRICE FOOD ITEM NAME"
        DISPLAY newline
        DISPLAY '-'*12 + ' '*4 + '-'*15 + ' '*2 + '-'*14
        FOR EACH data IN readFoodDetailsFile()
            IF (chosenFoodCategoryName WITH CALL replace("FOOD CATEGORY", ""), strip(), capitalize()) IN data THEN
                DISPLAY data[1] data[3] data[2]
            ENDIF
        BREAK LOOP
        ENDFOR
    ENDDO
ENDFUNCTION

FUNCTION deleteFoodItemRecord(userConfirmation, foodItemId, foodDetailsList)
    DOWHILE (True)
        TRY 
            IF (userConfirmation=="Y") THEN 
                FOR EACH data IN foodDetailsList
                    IF (foodItemId IN data[0]) THEN
                        index = foodDetailsList WITH CALL index(data)
                        foodDetailsList = foodDetailsList WITH CALL pop(index)
                    ENDIF
                    IF ('\n' IN foodDetailsList[-1][-1]) THEN 
                        temp = foodDetailsList[-1][-1] WITH CALL strip("\n")
                        foodDetailsList[-1][-1] = temp
                    ENDIF
                ENDFOR
                OPEN FILE FOOD_DETAILS_FILE IN WRITE MODE AS f
                    FOR EACH data IN foodDetailsList
                        WRITE data[0] INTO f
                    ENDFOR
                CLOSE FILE FOOD_DETAILS_FILE
                BREAK
            ELSE 
                CALL adminMenu()
            ENDIF
        EXCEPT ERROR THEN
            DISPLAY "Food details file is missing"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION displayRecordsMenu()
    DISPLAY newline
    DISPLAY "1. Food Categories"
    DISPLAY "2. Food Items by Category"
    DISPLAY "3. Customer Orders"
    DISPLAY "4. Customer Payment"
    DISPLAY "0. Back to Admin  Menu"
    DOWHILE (True)
        TRY
            orderRecordsList = CALL readOrderRecordsFile()
            foodCategoryList = CALL extractFoodCategories()
            userSelection = (CALL userInput("Display all records of",True)) AS INTEGER
            IF (userSelection == 1) THEN  
                CALL progressBar("Generating report")
                CALL displayFoodCategoryRecords(foodCategoryList)
            ELSE 
                IF (userSelection == 2) THEN
                    DISPLAY newline
                    DISPLAY "Select the food category that you want to be displayed"
                    CALL displayFoodCategories()
                    chosenCategory = (CALL userInput("Food category",True)) AS INTEGER
                    CALL listOutFoodItems((foodCategoryList[chosenCategory-1][0]))
                ELSE 
                    IF (userSelection == 3) THEN
                        CALL progressBar("Generating report")
                        CALL displayOrderOrPaymentRecords('orders',orderRecordsList)
                    ELSE 
                        IF (userSelection == 4) THEN
                            CALL progressBar("Generating report")
                            CALL displayOrderOrPaymentRecords('payments',orderRecordsList)
                        ELSE 
                            IF (userSelection == 0) THEN
                                CALL adminMenu()
                            ELSE
                                DISPLAY "Number out of range"
                                CONTINUE LOOP
                            BREAK LOOP
                            ENDIF
                        ENDIF
                    ENDIF
                ENDIF
            ENDIF
        EXCEPT ERROR THEN 
            DISPLAY "Please enter a number"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION displayFoodCategoryRecords(foodCategoryList)
    DISPLAY newline
    DISPLAY "\t\tDETAILS OF FOOD CATEGORIES"
    DISPLAY newline
    DISPLAY "\t\t" + "-"*26
    DISPLAY "CATEGORY NAME(S)\t\tCATEGORY DESCRIPTION(S)"
    DISPLAY newline 
    DISPLAY '-'*15 + "\t\t\t" + '-'*22
    FOR EACH data IN foodCategoryList
        DISPLAY data[0],data[1]
    ENDFOR
ENDFUNCTION

FUNCTION displayOrderOrPaymentRecords(displayChoice,orderRecordsList)
    DISPLAY newline
    DISPLAY "\t\t\t\tREPORT OF ALL CUSTOMER" + displayChoice WITH CALL upper()
    DISPLAY newline
    DISPLAY "\t\t\t\t" + '-'*31
    DISPLAY newline
    IF (displayChoice == 'orders') THEN 
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tORDER STATUS\tFOOD ID (QUANTITY)"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*12 + ' '*4 + '-'*18
        FOR EACH data IN orderRecordsList
            DISPLAY data[0],data[1],data[3],data[7],data[2]
        ENDFOR
    ELSE
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tPAYMENT METHOD\tPAYMENT STATUS\tPAID ON"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*14 + ' '*2 + '-'*14 + ' '*2 + '-'*7
        FOR EACH data IN orderRecordsList
            DISPLAY data[0],data[1],data[3],data[4],data[5],data[6]
        ENDFOR
    ENDIF
ENDFUNCTION

FUNCTION searchRecordsMenu()
    DISPLAY newline
    DISPLAY "1. CUSTOMER ORDER RECORD\t2. CUSTOMER PAYMENT RECORD" WITH CALL center(50)
    DISPLAY newline
    DISPLAY "Which record do you want to check?"
    DOWHILE (True)
        TRY
            orderRecordsList = CALL readOrderRecordsFile()
            searchCategory = (CALL userInput("Input 1 or 2",False)) AS INTEGER
            IF (searchCategory == 1) THEN
                CALL clearConsole()
                CALL pageBanners("SEARCH CUSTOMER ORDER",50)
                CALL searchCustomerOrder(orderRecordsList)
            ELSE 
                IF (searchCategory == 2) THEN
                    CALL clearConsole()
                    CALL pageBanners("SEARCH CUSTOMER PAYMENT",50)
                    CALL searchCustomerPayment(orderRecordsList)
                ELSE
                    DISPLAY "The number you submitted is outside the allowed range!"
                ENDIF
            ENDIF
            BREAK LOOP
        EXCEPT ERROR THEN
            DISPLAY "Please enter a number!"
        ENDTRY
    ENDDO
ENDFUNCTION

FUNCTION searchOrderByUsername(orderRecordsList)
    TRY
        recordByUsername = []
        username = CALL userInput("Please enter Customer Username",True)
        count = 0
        FOR EACH data IN orderRecordsList
            IF (username WITH CALL lower() == data[0]) THEN
                APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordByUsername
                count+=1
            ENDIF
        ENDFOR
        IF (count >=1) THEN
            DISPLAY count + " order records have been found for " + username
            CALL progressBar("Generating report")
            CALL time.sleep(0.5)
            CALL displaySearchResults('orders',username,recordByUsername)
        ELSE
            DISPLAY "No order records found for " + username
        ENDIF
    EXCEPT ERROR THEN
        DISPLAY "Invalid value submitted"
    ENDTRY
ENDFUNCTION

FUNCTION searchOrderById(orderRecordsList)
    orderID = CALL userInput("Please enter Order ID",True)
    recordById = []
    orderExists = False
    FOR EACH data IN orderRecordsList
        IF (orderID WITH CALL upper() == data[1]) THEN
            APPEND [data[0],data[1],data[2],data[3],data[7]] TO recordById
            orderExists = True
        ENDIF
    ENDFOR
    IF (orderExists) THEN
        DISPLAY "1 Order record have been found for Order ID " + orderID WITH CALL upper()
        CALL progressBar("Generating report")
        CALL time.sleep(0.5)
        CALL displaySearchResults('orders',orderID,recordById)
    ELSE
        DISPLAY "No order records found for " + orderID WITH CALL upper()
    ENDIF
ENDFUNCTION

FUNCTION searchPaymentByUsername(paymentList)
    TRY
        recordByUsername = []
        username = CALL userInput("Please enter Customer Username",True)
        count = 0
        FOR EACH data IN paymentList:
            IF (username WITH CALL lower() == data[0]) THEN
                APPEND [data[0],data[1],data[3],data[4],data[5],data[6]] TO recordByUsername
                count+=1
            ENDIF
        ENDFOR
        IF (count >=1) THEN
            DISPLAY count + " payment records have been found for " + username
            CALL progressBar("Generating report")
            CALL time.sleep(0.5)
            CALL displaySearchResults('payments',username,recordByUsername)
        ELSE
            DISPLAY "No payment records found for " + username
        ENDIF
    EXCEPT ERROR THEN
        DISPLAY("Invalid value submitted")
    ENDTRY
ENDFUNCTION

FUNCTION searchPaymentById(paymentList)
    orderID = CALL userInput("Please enter Order ID",True)
    recordById = []
    orderIdExists = False
    FOR EACH data IN paymentList
        IF (orderID WITH CALL upper() == data[1]) THEN
            APPEND [data[0],data[1],data[3],data[4],data[5],data[6]] TO recordById
            orderIdExists = True
        ENDIF
    ENDFOR 
    IF (orderIdExists) THEN
        DISPLAY "1 payment record have been found for Order ID " + orderID WITH CALL upper()
        CALL progressBar("Generating report")
        CALL time.sleep(0.5)
        CALL displaySearchResults('payments',orderID,recordById)
    ELSE
        DISPLAY "No payment records found for " + orderID WITH CALL upper()
    ENDIF
ENDFUNCTION

FUNCTION displaySearchResults(recordName,searchBasis,resultsList)
    IF (recordName == 'orders') THEN
        DISPLAY newline
        DISPLAY "\t\t\t\tORDER REPORT FOR " + searchBasis WITH CALL upper()
        DISPLAY newline 
        DISPLAY "\t\t\t\t" + '-'*(searchBasis LENGTH) + '-'*17
        DISPLAY newline
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tORDER STATUS\tFOOD ID(QUANTITY)"
        DISPLAY newline 
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*12 + ' '*4 + '-'*17
        FOR EACH data IN resultsList
            DISPLAY data[0] WITH CALL upper(),data[1],data[3],data[4],data[2]     
        ENDFOR
    ELSE
        DISPLAY newline
        DISPLAY "\t\t\t\tPAYMENT REPORT FOR " + searchBasis WITH CALL upper()
        DISPLAY newline 
        DISPLAY "\t\t\t\t" + '-'*19 + '-'*(searchBasis LENGTH)
        DISPLAY newline
        DISPLAY "CUSTOMER USERNAME\tORDER ID\tTOTAL PAYABLE\tPAYMENT METHOD\tPAYMENT STATUS\tPAID ON"
        DISPLAY newline
        DISPLAY '-'*17 + ' '*7 + '-'*8 + ' '*8 + '-'*13 + ' '*3 + '-'*14 + ' '*2 + '-'*14 + ' '*2 + '-'*7}
        FOR EACH data IN resultsList
            DISPLAY data[0] WITH CALL upper(),data[1],data[2],data[3],data[4],data[5]
        ENDFOR
    ENDIF
ENDFUNCTION

FUNCTION userHomepage()
    DOWHILE True
        CALL clearConsole()
        CALL pageBanners("GUEST DASHBOARD", 50)
        DISPLAY("\nPlease select any option below.")
        DISPLAY("1. View Menu", "2. Customer Login", "3. New Customer Registration", "\n0. Back to Main Menu", sep='\n')
        READ = CALL userInput("Choice", True).strip()
        IF READ == "1"
			CALL guestMenu()
        ELSE IF READ == "2"
            CALL customerMenu(customerLoginMenu())
        ELSE IF READ == "3"
            CALL pageBanners("NEW ACCOUNT", 50)
            CALL customerRegistrationMenu()
        ELSE IF READ == "0"
            BREAK LOOP
        ELSE
            READ("ERROR: Invalid selected number.")


FUNCTION guestMenu()
    DOWHILE True:
        CALL clearConsole()
		CALL pageBanners("MENU CATEGORIES", 50)
		DISPLAY("\n")
		CALL displayFoodCategories()
		DISPLAY("\n0. Back To Guest Menu")
		TRY:
			DISPLAY("\nSelect the food category that you want to be displayed")
			chosenCategory = CALL int(userInput("Food category", True).strip())
            IF chosenCategory == 0
                BREAK LOOP
			ELSE IF chosenCategory <= 4
				CALL guestPrintItem((extractFoodCategoryTitles()[chosenCategory-1][0]))
			ELSE
                READ("ERROR: Invalid chosen category.")
        EXCEPT ValueError:
            READ("ERROR: Please enter numbers only.")


FUNCTION guestPrintItem(chosenFoodCategoryName)
    DOWHILE True
        TRY
			CALL clearConsole()
            DISPLAY(f"FOOD ITEMS IN {chosenFoodCategoryName.upper()}\n{'-'*24}{'-'*len(chosenFoodCategoryName)}")
            FOR data IN readFoodDetailsFile()
                IF (chosenFoodCategoryName.replace("FOOD CATEGORY", "").strip().capitalize()) IN data
                    DISPLAY(data[2])
            READ("\nPress Enter to Return")
            BREAK LOOP
        EXCEPT TypeError:
            READ("ERROR: Please enter numbers only.")

FUNCTION customerLoginMenu()
    DOWHILE True
        CALL clearConsole()
        CALL pageBanners("Login as Customer", 50)
        TRY
            customerDetailsList = CALL customerReadDetailFile()
            uName = CALL userInput("Username", True).strip()
            CALL progressBar("Checking IF username exists")
            IF (authUsername(uName, customerDetailsList))
                DISPLAY("Username found, please enter password\n")
                DOWHILE True:
                    uPass = CALL userInput("Password", True).strip()
                    IF (authPassword(uName, uPass, customerDetailsList))
                        CALL progressBar("Logging you in")
                        RETURN uName
                    ELSE
                        DISPLAY("Incorrect password, please retry\n")
            ELSE
                DISPLAY("Username NOT found, please retry")
        EXCEPT TypeError
            READ("ERROR: Customers details file is corrupted!")
            BREAK LOOP

FUNCTION customerReadDetailFile()
    customerDetailsList = []
    OPEN CUSTOMER_DETAILS_FILE READ AS customerDetailsFile:
        CALL skipFileLine(6, customerDetailsFile)
        FOR EACH row IN customerDetailsFile
            REMOVE "\n" REPLACE " | " to " " SPLIT WITH " " IN rows THEN ADD TO customerDetailsList[]
    RETURN customerDetailsList

FUNCTION customerMenu(username: str)
    cart = []
    DOWHILE True
        TRY
            CALL clearConsole()
            CALL pageBanners("Customer Menu", 50)
            DISPLAY("\nWelcome!, what would you like to do today?")
            DISPLAY("1. View Item By Categories", "2. View Orders", "\n0. Logout", sep='\n')
            input = CALL int(userInput("Choice", True).strip())
            IF input == 1
                cart = CALL customerMenuCategory(cart, username)
            ELSE IF input == 2
                CALL customerOrderMenu(username)
            ELSE IF input == 0
                BREAK LOOP
            ELSE
                READ("\nERROR: Number out of rang.")
        EXCEPT ValueError
            READ("\nERROR: Please enter a valid selection number.")

FUNCTION customerMenuCategory(cart: list, username:str)
    foodCat = CALL extractFoodCategoryTitles()
    foodCatLen = CALL len(foodCat)
    DOWHILE True
        TRY
            CALL clearConsole()
            CALL pageBanners("Food Menu", 50)
            DISPLAY("\nWhat category of beverage would you like to know more?\n")
            CALL customerPrintCategoryDetail()
            IF len(cart) > 0
                CALL customerCartPrint(cart)
            DISPLAY("\nC. View Cart\n0. Back to Customer Menu")
            chosenCategory = CALL userInput("Food category", True).strip()
            IF chosenCategory == "0"
                RETURN cart
            ELSE IF chosenCategory.upper() == "C"
                CALL customerCartMenu(cart, username)
                cart = []
            ELSE IF int(chosenCategory) <= foodCatLen
                cart = CALL customerItemMenu(cart, (extractFoodCategoryTitles()[int(chosenCategory)-1][0]))
            ELSE
                READ("\nERROR: Number out of range.")
        EXCEPT ValueError
            READ("\nERROR: Please enter a valid selection number.")

FUNCTION customerPrintCategoryDetail()
    foodCat = CALL extractFoodCategoryTitles()
    FOR i IN range(len(foodCat)):
        DISPLAY("{}. {} - {}".format(i+1, foodCat[i][0], foodCat[i][1]))

FUNCTION customerCartMenu(cart: list, username: str)
	DOWHILE True
        CALL clearConsole()
		CALL pageBanners("  Cart  ", 50)
        cartDetailArray, cartTtl = CALL customerCartDetail(cart)
        DISPLAY("\n{:<3}{:<2}{:<32}{:<2}{:<9}{:<2}{:<11}{:<2}{:<17}{:<2}".format("N", "|", "Item Name", "|", "Quantity", "|", "Unit Price", "|", "Total Unit Price", "|"))
		DISPLAY("{:<3}{:<2}{:<32}{:<2}{:<9}{:<2}{:<11}{:<2}{:<17}{:<2}".format("", "|", "", "|", "", "|", "", "|", "", "|"))
        FOR i IN range(len(cartDetailArray))
            DISPLAY("{:<3}{:<2}{:<32}{:<2}{:<9}{:<2}{:<11}{:<2}{:<17}{:<2}".format((str(i+1)+"."), "|",
                  cartDetailArray[i][0], "|", cartDetailArray[i][1], "|", cartDetailArray[i][2], "|", cartDetailArray[i][3], "|"))
        DISPLAY(f"\nTotal: {cartTtl}\n\n1. Submit Order Cart\n0. Back")
        option = CALL userInput("Choice", True).strip()
        IF option == "0"
            BREAK LOOP	
        ELSE IF option == "1"
            CALL customerCartSubmit(cart, username, cartTtl)
            RETURN ([])
        ELSE
            DISPLAY("ERROR: Something went wrong, invalid READ.")

FUNCTION customerCartDetail(cart: list)
	itemsArray = CALL readFoodDetailsFile()
	cartDetail = []
    cartTotal = 0
    FOR cartItem IN range(0, len(cart), 2)
        FOR item IN range(len(itemsArray))
            IF cart[cartItem] == itemsArray[item][1]
                unitTotal =  CALL float(itemsArray[item][3])*float(cart[cartItem+1])
                cartTotal += unitTotal
                detail = [(itemsArray[item][2]), CALL str(cart[cartItem+1]), itemsArray[item][3], CALL str(unitTotal)]
				CALL cartDetail.append(detail)
    cartTotal = "{:.2f}".format(cartTotal)
    RETURN (cartDetail, cartTotal)

FUNCTION customerCartSubmit(cart: list, username: str, cartTtl: float)
        IF len(cart) == 0
            READ("ERROR: Your order cart is empty.")
            RETURN
        itemString = ""
        FOR i IN range(0, len(cart), 2)
            itemString += cart[i] + "(" + CALL str(cart[i + 1]) + ")"
            IF i < (len(cart)-2)
                itemString += ","
        record = username + " | " + CALL str(customerOrderDetailFileLen()+1) + " | " + itemString + " | " + CALL str(cartTtl) + " | " + "PAID\n"
        with open(ORDER_RECORDS_FILE, "a") as orderFile
            CALL orderFile.write(record)
        READ("Order placed successfully, please press enter to RETURN.")

FUNCTION customerOrderDetailFileLen()
    len = 0
    READ ORDER_RECORDS_FILE AS orderDetailFile
        CALL skipFileLine(6, orderDetailFile)
        FOR row IN orderDetailFile
            len += 1
    RETURN len

FUNCTION customerItemMenu(cart: list, chosenFoodCategoryName: str)
    cartChosen, addCartChosen = False, False
    DOWHILE True:
        CALL clearConsole()
        CALL customerItemPrint(chosenFoodCategoryName)
        TRY
            cart = CALL customerCartTidy(cart)
            IF len(cart) > 0
                CALL customerCartPrint(cart)
        EXCEPT TypeError
            DISPLAY NOTHING TO PREVENT PROGRAM CRASH
        IF cartChosen
            IF addCartChosen
                itemToAdd = CALL userInput("Item Code to Add (M2)", True).strip().upper()
                IF customerCartValidItem(itemToAdd)
                    amountToAdd = CALL str(userInput("Amount", True).strip())
                    cart = CALL customerCartAddItem(itemToAdd, amountToAdd, cart)
                    cartChosen, addCartChosen = False, False
                ELSE
                    READ("\nERROR: Invalid amount READ.")
                    cartChosen, addCartChosen = False, False
            ELSE
                itemToRemove = CALL userInput("Item code to remove", True).strip().upper()
                IF customerCartValidItem(itemToRemove)
                    amountToRemove = CALL 	userInput("Amount to Remove (\"All\" to remove item from cart)", True).strip()
                    cart = CALL customerCartRemoveItem(itemToRemove, amountToRemove, cart)
                    cartChosen = False
                ELSE
                    READ("ERROR: Invalid amount READ.")
                    cartChosen = False
        ELSE
            DISPLAY("\n1. Add Item to Cart.\n2. Remove Item from Cart.\n\n0. Back")
            uInput = CALL userInput("Choice", True).strip().upper()
            IF uInput == "0"
                RETURN cart
            ELSE IF uInput == "1":
                cartChosen, addCartChosen = True, True
            ELSE IF uInput == "2":
                cartChosen = True
            ELSE
                READ("ERROR: Invalid selection entered.")

FUNCTION customerItemPrint(chosenFoodCategoryName: str)
    DOWHILE True
        TRY
            DISPLAY(f"{chosenFoodCategoryName.upper()}".center(50))
            DISPLAY(f"{'-'*24}{'-'*len(chosenFoodCategoryName)}")
            DISPLAY(f"FOOD ITEM ID\tFOOD ITEM PRICE\t FOOD ITEM NAME\n{'-'*12}{' '*4}{'-'*15}{' '*2}{'-'*14}")
            FOR data IN readFoodDetailsFile():
                IF (chosenFoodCategoryName.replace("FOOD CATEGORY", "").strip().capitalize()) IN data
                    DISPLAY('{:<16}{:<15}\t {}'.format(data[1], data[3], data[2]))
            BREAK LOOP
        EXCEPT TypeError
            READ("ERROR: Please enter a number.")

FUNCTION customerCartTidy(cart: list)
	tempCart = []
    FOR i IN range(0, len(cart), 2)
        IF cart[i+1] != 0
            tempCart.extend([cart[i], cart[i+1]])
    RETURN tempCart

FUNCTION customerCartPrint(cart: list)
    stringToPrint = ""
    FOR i IN range(0, len(cart), 2)
        stringToPrint = stringToPrint + cart[i] + "(" + CALL str(cart[i+1]) + ")"
        IF i < (len(cart)-2):
            stringToPrint = stringToPrint + ", "
    DISPLAY(f"\nCart :  {stringToPrint}")

FUNCTION customerCartValidItem(code: str)
    itemsArray = CALL readFoodDetailsFile()
    FOR item IN range(len(itemsArray))
        IF itemsArray[item][1] == code
            RETURN True
    RETURN False

FUNCTION customerCartAddItem(item: str, amount: str, cart: list)
    TRY
        intAmount = CALL int(amount)
        FOR i IN range(0, len(cart), 2)
            IF cart[i] == item
                cart[i+1] += intAmount
                RETURN cart
        CALL cart.extend([item, intAmount])
        RETURN cart
    EXCEPT
        READ("\nERROR: Alphabet/s found IN amount entered, please enter numbers only.")
        RETURN cart
		
FUNCTION customerCartRemoveItem(item: str, amount: str, cart: list)
    IF amount.upper() != "ALL"
        TRY
			intAmount = CALL int(amount)
        EXCEPT
            READ("ERROR: Invalid string found, do you mean \"All\"?")
            RETURN cart
    FOR i IN range(0, len(cart), 2)
        IF cart[i] == item
            amountFromCart = cart[i+1]
            IF amount.lower() == "all"
                cart[i+1] = 0
            ELSE IF intAmount <= amountFromCart
                cart[i+1] -= intAmount
            ELSE IF intAmount > amountFromCart
                READ ("ERROR: Item code entered not found, please try again.")
                RETURN cart
            RETURN cart
    READ("ERROR: Item code entered NOT found, please try again.")
    RETURN cart

FUNCTION customerOrderMenu(username: str)
    CALL clearConsole()
    CALL pageBanners("  Orders  ", 50)
    DISPLAY("")
    CALL customerOrderPrint(username)
    READ("\nPress enter to RETURN.")

FUNCTION customerOrderPrint(username: str)
        orderDetailArray = CALL customerOrderDetailRead(username)
        DISPLAY("{:<9}{:<2}{:<32}{:<2}{:<8}{:<2}{:<7}{:<2}".format("Order ID", "|", "Items", "|", "Total", "|", "Status", "|"))
        DISPLAY("{:<9}{:<2}{:<32}{:<2}{:<8}{:<2}{:<7}{:<2}".format("", "|", "", "|", "", "|", "", "|"))
        FOR i IN range(len(orderDetailArray))
            DISPLAY("{:<9}{:<2}{:<32}{:<2}{:<8}{:<2}{:<7}{:<2}".format(orderDetailArray[i][1], "|", orderDetailArray[i][2], "|", orderDetailArray[i][3], "|", orderDetailArray[i][4], "|"))

FUNCTION customerOrderDetailRead(username: str)
    orderArray = []
    READ ORDER_RECORDS_FILE AS orderDetailFile
        CALL skipFileLine(6, orderDetailFile)
        FOR row IN orderDetailFile
            order = REMOVE "\n" REPLACE " | " TO " " SPLIT WITH " " IN ROW 
            IF order[0] == username
                CALL orderArray.append(order)
    RETURN orderArray

FUNCTION customerRegistrationMenu()
    titleList = ["Username", "Password", "First Name", "Last Name", "House Number", "Street", "State", "Postcode", "Phone Number"]
    userData = ["", "", "", "", "", "", "", "", ""]
    DOWHILE True
        FOR a IN range(len(titleList))
            CALL clearConsole()
            CALL pageBanners("Registration", 50)
            DISPLAY("")
            FOR b IN range(9)
                DISPLAY("{:<15}{:<2}{:<2}".format(titleList[b], ":", userData[b]))
            DISPLAY("\n0. Type \"0\" to cancel registration.")
            data = CALL userInput(titleList[a], True).strip()
            IF data == "0"
                RETURN
            userData[a] = data
        success = CALL customerRegistrationSubmit(userData)
        IF success
            READ("\nUser account regsitered successfully, please enter to RETURN.")
            BREAK LOOP
			
FUNCTION customerRegistrationSubmit(userData:list)
    FOR data IN userData
        IF data.strip() == ""
            READ("ERROR: An empty data found, please try again.")
            RETURN False
        record = userData[0] + " | " + userData[1] + " | " + userData[2] + " | " + userData[3] + " | " + userData[4] + " | " + userData[5] + " | " + userData[6] + " | " + userData[7] + " | " + userData[8] + "\n"
    OPEN CUSTOMER_DETAILS_FILE AS custFile
		CALL custFile.write(record)
    RETURN True
	
FUNCTION main()
    DOWHILE True
        CALL clearConsole()
        DISPLAY(" ____   ___  _____ ____".center(78))
        DISPLAY("/ ___| / _ \|  ___/ ___|".center(78))
        DISPLAY("\___ \| | | | |_  \___ \\".center(78))
        DISPLAY(" ___) | |_| |  _|  ___) |".center(80))
        DISPLAY("|____/ \___/|_|   |____/".center(78))
        DISPLAY("")
        DISPLAY(f' {"Welcome to the Online Food Ordering Management System"} '.center(85, '='))
        DISPLAY("\nWho are you logging in as?\n", "1. Admin", "2. Customer", "3. Quit Program", sep=' \n')
        TRY
            uInput = CALL int(userInput("Login as (Number)",True).strip())
            IF uInput == 1 
                CALL clearConsole()
                CALL pageBanners("ADMIN LOGIN PAGE", 50)
                CALL adminLoginPage()
            ELSE IF uInput == 2
				CALL userHomepage()
            ELSE IF uInput == 3
                CALL quit()
            ELSE 
                READ("ERROR: Number out of choice range")
        EXCEPT ValueError
            READ("ERROR: Foreign character submitted")

IF __name__ == '__main__'
    TRY	
        CALL initialProgramCheck()
        CALL progressBar("\nLoading program")
        CALL time.sleep(0.1)
        CALL main()
    EXCEPT KeyboardInterrupt:
        CALL quit()